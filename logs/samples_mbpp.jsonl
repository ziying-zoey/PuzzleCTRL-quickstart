{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "completion": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\""}
{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(a, b):\n    return (a ^ b) & ~(a ^ b + 1) == 0"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(text):\n    words = text.split()\n    result = [word for word in words if len(word) >= 4]\n    return result"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "completion": "def find_Rotations(s):\n    if s == s[:1] * len(s):\n        return 1\n    for i in range(1, len(s)):\n        if s[i:] + s[:i] == s:\n            return i\n    return len(s)"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    if first_index == -1 or last_index == -1:\n        return s\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]"}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, length):\n    area_of_triangle = 0.5 * base * height\n    volume = area_of_triangle * length\n    return volume"}
{"task_id": "Mbpp/16", "completion": "def text_lowercase_underscore(s):\n    import re\n    return bool(re.match(r'^[a-z]+_[a-z]+$', s))"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(str1, str2):\n    result = ''.join([char for char in str1 if char not in str2])\n    return result"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "completion": "def is_woodall(n):\n    if n < 1:\n        return False\n    x = 2\n    while True:\n        if x * (2 ** n) - 1 == n:\n            return True\n        if x * (2 ** n) - 1 > n:\n            return False\n        x += 1"}
{"task_id": "Mbpp/56", "completion": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n + 1 == 2 * reversed_n"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    largest_num = int(''.join(map(str, digits)))\n    return largest_num"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(a, b):\n    return (a ^ b) < 0"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        total = 0\n        for j in range(i, len(s)):\n            total += int(s[j])\n            if total == j - i + 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "completion": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    max_diff = max(y - x for x, y in pairs)\n    return max_diff"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total"}
{"task_id": "Mbpp/66", "completion": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(A):\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(main_list, sub_list):\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    if sub_len > main_len:\n        return False\n    \n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples):\n    return len(set(len(tup) for tup in tuples)) == 1"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n    return arr"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    return n % 2 == 0 or n % 2 == 1 and n != 1"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_map = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_map:\n            if color_map[color] != pattern:\n                return False\n        else:\n            color_map[color] = pattern\n    return True"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(lst, k):\n    result = [tup for tup in lst if all(x % k == 0 for x in tup)]\n    return result"}
{"task_id": "Mbpp/77", "completion": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "completion": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    a, b = 1, 1\n    seq = [0, 1, 1]\n    for i in range(3, n + 1):\n        current = seq[a] + seq[b]\n        seq.append(current)\n        a, b = b, current\n    return seq[n]"}
{"task_id": "Mbpp/85", "completion": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    from collections import defaultdict\n    \n    freq = defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    \n    return dict(freq)"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n):\n    return n - 1 if n > 0 else 0"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"}
{"task_id": "Mbpp/91", "completion": "def find_substring(lst, substring):\n    for string in lst:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2 or any(s[i] == s[i+1] for i in range(len(s)-1)):\n        return False\n    return True"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"}
{"task_id": "Mbpp/96", "completion": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"}
{"task_id": "Mbpp/98", "completion": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": "Mbpp/100", "completion": "def next_smallest_palindrome(n):\n    n += 1\n    while not str(n) == str(n)[::-1]:\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    if n < m or m < 0:\n        return 0\n    if n == m or m == 0:\n        return 1\n    A = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        A[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, min(i, m) + 1):\n            A[i][j] = (i - 1) * A[i - 1][j] + A[i - 1][j - 1]\n    return A[n][m]"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "completion": "def count(lst):\n    return sum(lst)"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    merged_list = sorted(list1 + list2 + list3)\n    return merged_list"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(s, rotations):\n    def rotate(s):\n        return s[-1] + s[:-1]\n    \n    odd_count = 0\n    for _ in range(rotations):\n        s = rotate(s)\n        if sum(int(bit) for bit in s) % 2 != 0:\n            odd_count += 1\n            \n    return odd_count"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return set()\n    \n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return common_elements"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(s):\n    return s.split(' ')"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if (mid % 2 == 1 and arr[mid] == arr[mid - 1]) or (mid % 2 == 0 and arr[mid] == arr[mid + 1]):\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(tuples):\n    return max(a * b for a, b in tuples)"}
{"task_id": "Mbpp/123", "completion": "def amicable_numbers_sum(n):\n    def divisors_sum(x):\n        return sum([i for i in range(1, x) if x % i == 0])\n    \n    total = 0\n    for num in range(2, n + 1):\n        friend = divisors_sum(num)\n        if friend > num and divisors_sum(friend) == num:\n            total += num + friend\n    return total // 2"}
{"task_id": "Mbpp/124", "completion": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/125", "completion": "def find_length(s):\n    max_diff = 0\n    current_diff = 0\n    for char in s:\n        current_diff += 1 if char == '0' else -1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff * 2"}
{"task_id": "Mbpp/126", "completion": "def sum_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    common_divisors_sum = 0\n    for i in range(1, gcd(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    magic_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n-1-i] for i in range(n)) != magic_sum:\n        return False\n    return True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    max_freq_item = max(freq.keys(), key=lambda x: freq[x])\n    return max_freq_item"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s_list) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i, j = i + 1, j - 1\n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "completion": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)"}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "completion": "def zero_count(arr):\n    zero_count = sum(1 for x in arr if x == 0)\n    non_zero_count = len(arr) - zero_count\n    if non_zero_count == 0:\n        return 0.0\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            if n == 1:\n                return True\n            return False\n    return True"}
{"task_id": "Mbpp/139", "completion": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/140", "completion": "def extract_singly(lists):\n    result = set()\n    for sublist in lists:\n        result.update(sublist)\n    return result"}
{"task_id": "Mbpp/141", "completion": "def pancake_sort(arr):\n    def flip(sub_arr, k):\n        sub_arr[:k] = sub_arr[:k][::-1]\n\n    n = len(arr)\n    for i in range(n, 1, -1):\n        max_index = arr.index(max(arr[:i]))\n        if max_index + 1 != i:\n            flip(arr, max_index + 1)\n            flip(arr, i)\n    return arr"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    min_element = arr[0]\n    max_diff = 0\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, abs(arr[i] - min_element))\n        min_element = min(min_element, arr[i])\n    return max_diff"}
{"task_id": "Mbpp/160", "completion": "def find_solution(a, b, n):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def extended_gcd(x, y):\n        if x == 0:\n            return y, 0, 1\n        gcd, s1, t1 = extended_gcd(y % x, x)\n        s = t1 - (y // x) * s1\n        t = s1\n        return gcd, s, t\n\n    gcd_val, s, t = extended_gcd(abs(a), abs(b))\n    if n % gcd_val != 0:\n        return None\n    x = s * (n // gcd_val) * (1 if a > 0 else -1)\n    y = t * (n // gcd_val) * (1 if b > 0 else -1)\n    return (x, y)"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(original_list, elements_to_remove):\n    return [item for item in original_list if item not in elements_to_remove]"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2 * i\n    return result"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    return sum(1 for i, c in enumerate(s, start=1) if ord(c.lower()) - 96 == i)"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32\n    return n + 1"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(nums, start_index, end_index):\n    return sum(nums[start_index:end_index+1])"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "completion": "def check_type(test_tup):\n    return len(set(type(ele) for ele in test_tup)) == 1"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, x):\n    left = 0\n    right = n // 2\n    \n    while right < n and arr[left] == arr[right]:\n        left += 1\n        right += 1\n    \n    if right - left >= n // 2:\n        return True\n    return False"}
{"task_id": "Mbpp/224", "completion": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(s):\n    result = ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n    return result"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(s, char):\n    return s.replace(' ', char)"}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "completion": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(n):\n    # Create a mask with even bits set\n    mask = 0x55555555  # Binary: 01010101...\n    return n | mask"}
{"task_id": "Mbpp/237", "completion": "def check_occurrences(lst):\n    from collections import defaultdict\n    \n    count_dict = defaultdict(int)\n    for tup in lst:\n        count_dict[tup] += 1\n    \n    # Remove tuples with count 0 as they don't occur in the list\n    return {k: v for k, v in count_dict.items() if v > 0}"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m, n):\n    if m < 1 or n < 1:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i][j - 1]\n            if j >= 2:\n                dp[i][j] += dp[i - 1][j // 2]\n    \n    return dp[n][m]"}
{"task_id": "Mbpp/240", "completion": "def replace_list(lst1, lst2):\n    lst1[-1:] = lst2\n    return lst1"}
{"task_id": "Mbpp/242", "completion": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "completion": "def next_Perfect_Square(n):\n    import math\n    root = math.isqrt(n)\n    if root * root == n:\n        return (root + 1) * (root + 1)\n    else:\n        return (root + 1) * (root + 1)"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n    \n    for i in range(1, n):\n        inc[i] = max(arr[i], inc[i-1])\n    \n    for i in range(n-2, -1, -1):\n        dec[i] = max(arr[i], dec[i+1])\n    \n    max_bitonic_sum = 0\n    for i in range(1, n-1):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i-1] + dec[i+1] - arr[i])\n    \n    max_bitonic_sum = max(max_bitonic_sum, inc[0], dec[n-1])\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "completion": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    return [element] + [item for pair in zip([element] * len(lst), lst) for item in pair]"}
{"task_id": "Mbpp/252", "completion": "def convert(real):\n    magnitude = abs(real)\n    angle = cmath.phase(real)\n    return magnitude, angle"}
{"task_id": "Mbpp/253", "completion": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "completion": "def combinations_colors(colors, n):\n    from itertools import product\n    \n    result = []\n    for combo in product(colors, repeat=n):\n        result.append(combo)\n    \n    return result"}
{"task_id": "Mbpp/256", "completion": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return sum(is_prime(i) for i in range(2, n))"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(tup1, tup2):\n    result = []\n    for (a1, b1), (a2, b2) in zip(tup1, tup2):\n        result.append((max(a1, a2), max(b1, b2)))\n    return tuple(result)"}
{"task_id": "Mbpp/260", "completion": "def newman_prime(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "Mbpp/261", "completion": "def division_elements(t1, t2):\n    return tuple(x / y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_years):\n    if human_years < 0:\n        raise ValueError(\"Human years must be a non-negative number\")\n    if human_years <= 2:\n        dog_years = human_years * 10.5\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n    return dog_years"}
{"task_id": "Mbpp/265", "completion": "def list_split(lst, n):\n    result = []\n    for i in range(n):\n        result.append([lst[j] for j in range(i, len(lst), n)])\n    return result"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    return sum([i**2 for i in range(1, 2*n+1, 2)])"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    return 1 + 6 * (n * (n - 1))"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    total_sum = 0\n    current_even = 2\n    for _ in range(n):\n        total_sum += current_even ** 5\n        current_even += 2\n    return total_sum"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(t1, t2):\n    return tuple(a - b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/274", "completion": "def even_binomial_Coeff_Sum(n):\n    from math import comb\n    \n    return sum(comb(n, k) for k in range(0, n+1, 2))"}
{"task_id": "Mbpp/276", "completion": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/277", "completion": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    return int((3 * n * (2 * n - 1)))"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "completion": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "completion": "def sub_list(lst1, lst2):\n    return [a - b for a, b in zip(lst1, lst2)]"}
{"task_id": "Mbpp/283", "completion": "def validate(n):\n    s = str(n)\n    for i in s:\n        if int(i) > len([x for x in s if x == i]):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "def check_element(lst, element):\n    return all(x == element for x in lst)"}
{"task_id": "Mbpp/285", "completion": "def text_match_two_three(text):\n    return bool(re.search(r'ab{2,3}', text))"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, n, k):\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, n * k):\n        max_ending_here = max(arr[i % n], max_ending_here + arr[i % n])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"}
{"task_id": "Mbpp/287", "completion": "def square_Sum(n):\n    return sum([i**2 for i in range(2, 2*n+1, 2)])"}
{"task_id": "Mbpp/290", "completion": "def max_length(lst_of_lsts):\n    max_len = -1\n    max_lst = []\n    for lst in lst_of_lsts:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return (max_len, max_lst)"}
{"task_id": "Mbpp/292", "completion": "def find(dividend, divisor):\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "completion": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\""}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    return max(lst, key=lambda x: (isinstance(x, int) or isinstance(x, float), x))"}
{"task_id": "Mbpp/296", "completion": "def get_Inv_Count(arr):\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            merge_sort(left_half)\n            merge_sort(right_half)\n\n            i = j = k = 0\n\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] < right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    inv_count[0] += len(left_half) - i\n                k += 1\n\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    inv_count = [0]\n    merge_sort(arr)\n    return inv_count[0]"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(lst):\n    max_name = ''\n    max_aggregate_value = 0\n    \n    for name, value in lst:\n        if value > max_aggregate_value:\n            max_aggregate_value = value\n            max_name = name\n    \n    return (max_name, max_aggregate_value)"}
{"task_id": "Mbpp/300", "completion": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "completion": "def start_withp(words):\n    result = []\n    for word in words:\n        parts = word.split()\n        for part in parts:\n            if part.startswith('P'):\n                result.append(part)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, i, k):\n    if k >= n or i >= k:\n        return 0\n    \n    max_sum = arr[k]\n    current_sum = 0\n    \n    for j in range(i):\n        if arr[j] < arr[k]:\n            current_sum = max_sum_increasing_subseq(arr, n, j, k) + arr[k]\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    # Generate all possible products\n    products = [x * y for x in list1 for y in list2]\n    # Sort the products in descending order\n    sorted_products = sorted(products, reverse=True)\n    # Return the first n products from the sorted list\n    return sorted_products[:n]"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    # If n is 0, setting the first unset bit will result in 1\n    if n == 0:\n        return 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32  # For 64-bit integers\n    return n + 1"}
{"task_id": "Mbpp/312", "completion": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\""}
{"task_id": "Mbpp/388", "completion": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "completion": "def add_string(lst, fmt):\n    return [fmt.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(keys, names, scores):\n    result = []\n    for key, name, score in zip(keys, names, scores):\n        nested_dict = {key: {name: score}}\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    max_sum = n\n    for divisor in [2, 3, 4, 5]:\n        max_sum = max(max_sum, get_max_sum(n // divisor) + n)\n    return max_sum"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(numbers):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return sum(digit_sum(number) for number in numbers)"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(pairs):\n    return min(a * b for a, b in pairs)"}
{"task_id": "Mbpp/410", "completion": "def min_val(lst):\n    return min(lst, key=lambda x: (isinstance(x, str), x))"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(lst, n):\n    return [x[n] for x in lst]"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    return any(x in seq2 for x in seq1)"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    \n    return (max1, max2)"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    print(total_sum * len(numbers))"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        total += even_number ** 3\n    return total"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(tup, delimiter=\"-\"):\n    return delimiter.join(str(item) for item in tup)"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n):\n    total_sum = sum(i**3 for i in range(1, n+1))\n    average = total_sum / n\n    return average"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(tup):\n    return tuple(s[-1] for s in tup)"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    directrix = c - (1 - b**2 / (4 * a))\n    return directrix"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    return all(num > x for x in arr)"}
{"task_id": "Mbpp/435", "completion": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s):\n    result = ''.join([s[i] for i in range(len(s)) if i % 2 == 1])\n    return result"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(nums):\n    result = 0\n    for num in nums:\n        result = result * 100 + num\n    return result"}
{"task_id": "Mbpp/440", "completion": "def find_adverb_position(sentence):\n    adverbs = ['ably', 'accurately', 'actively', 'actually', 'admirably', 'adroitly', 'agonizingly', 'aimlessly', 'allegedly', 'amazingly', 'ambitiously', 'anxiously', 'anxiously', 'apparently', 'approximately', 'arbitrarily', 'ashamedly', 'athletically', 'attentively', 'attractively', 'awkwardly', 'badly', 'beautifully', 'better', 'bravely', 'carefully', 'certainly', 'clearly', 'cleverly', 'coolly', 'completely', 'conceivably', 'confidently', 'consistently', 'continually', 'conventionally', 'coyly', 'cravenly', 'creatively', 'credibly', 'crucially', 'currently', 'curtly', 'defiantly', 'deliberately', 'diligently', 'difficultly', 'directly', 'disappointingly', 'discreetly', 'distinctly', 'doubtfully', 'drunkenly', 'e"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(size):\n    return 6 * size ** 2"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(tup1, tup2):\n    result = []\n    for i in range(min(len(tup1), len(tup2))):\n        result.append((tup1[i][0] * tup2[i][0], tup1[i][1] * tup2[i][1]))\n    return result"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        if item in tup:\n            count += tup.count(item)\n    return count"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    def perrin(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            a, b, c = 3, 0, 2\n            for _ in range(3, n + 1):\n                a, b, c = b, c, a + b\n            return c\n    \n    return sum(perrin(i) for i in range(n + 1))"}
{"task_id": "Mbpp/450", "completion": "def extract_string(strings, size):\n    return [s for s in strings if len(s) == size]"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    if n % 2 != 0:\n        return 0\n    result = 1\n    for i in range(2, int(n**0.5) + 1):\n        count = 0\n        current_sum = 1\n        current_term = 1\n        while n % i == 0:\n            count += 1\n            n //= i\n            current_term *= i\n            current_sum += current_term\n        result *= current_sum\n    if n >= 2:\n        result *= 2 + n\n    return result"}
{"task_id": "Mbpp/454", "completion": "def text_match_wordz(text):\n    import re\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))"}
{"task_id": "Mbpp/455", "completion": "def check_monthnumb_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s):\n    return ''.join([char for char in s if not char.isupper()])"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(arr):\n    from itertools import chain, combinations\n    \n    def all_subsets(s):\n        return chain(*map(lambda x: combinations(s, x), range(0, len(s)+1)))\n    \n    return [list(subset) for subset in all_subsets(arr)]"}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = min_product = result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    max_product_ending_here = [0] * len(arr)\n    max_product_so_far = arr[0]\n    max_product_ending_here[0] = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product_ending_here[i] = arr[i]\n        if arr[i] * max_product_ending_here[i-1] > arr[i]:\n            max_product_ending_here[i] *= max_product_ending_here[i-1]\n        if max_product_ending_here[i] > max_product_so_far:\n            max_product_so_far = max_product_ending_here[i]\n    \n    return max_product_so_far"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(t):\n    return tuple(x + y for x, y in zip(t, t[1:]))"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "completion": "def check_Consecutive(lst):\n    return all(b - a == 1 for a, b in zip(lst, lst[1:]))"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(tup1, tup2):\n    set1 = {tuple(sorted(t)) for t in tup1}\n    set2 = {tuple(sorted(t)) for t in tup2}\n    intersection = set1 & set2\n    return intersection"}
{"task_id": "Mbpp/474", "completion": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    if not arr:\n        return 0\n    min_val = min(arr)\n    max_val = max(arr)\n    return min_val + max_val"}
{"task_id": "Mbpp/477", "completion": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "completion": "def remove_lowercase(s):\n    return ''.join([char for char in s if char.isupper() or not char.isalpha()])"}
{"task_id": "Mbpp/479", "completion": "def first_Digit(n):\n    while n >= 10:\n        n = n // 10\n    return n"}
{"task_id": "Mbpp/554", "completion": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                odd_count += 1\n    return odd_count"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    str_num1, str_num2 = str(num1), str(num2)\n    length = min(len(str_num1), len(str_num2))\n    distance = 0\n    \n    for i in range(length):\n        distance += abs(int(str_num1[i]) - int(str_num2[i]))\n    \n    distance += abs(len(str_num1) - len(str_num2))\n    \n    return distance"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n        \n    return max_so_far"}
{"task_id": "Mbpp/560", "completion": "def union_elements(t1, t2):\n    result = set(t1) | set(t2)\n    return tuple(sorted(result))"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "completion": "def extract_values(input_string):\n    import re\n    return re.findall(r'\"(.*?)\"', input_string)"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "completion": "def split(s):\n    return [char for char in s]"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"}
{"task_id": "Mbpp/567", "completion": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "completion": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "completion": "def unique_product(lst):\n    unique_numbers = set(lst)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(main_list, sub_list):\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    if sub_len > main_len:\n        return False\n    \n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "completion": "def last_Digit_Factorial(n):\n    if n < 0:\n        return -1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10\n    return last_digit"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(t1, t2):\n    set1 = set(t1)\n    set2 = set(t2)\n    dissimilar_elements = tuple(set1.symmetric_difference(set2))\n    return dissimilar_elements"}
{"task_id": "Mbpp/580", "completion": "def extract_even(t):\n    result = ()\n\n    def process_item(item):\n        if isinstance(item, int) and item % 2 == 0:\n            nonlocal result\n            result += (item,)\n        elif isinstance(item, tuple):\n            temp = ()\n            for sub_item in item:\n                process_item(sub_item)\n                if sub_item != () and sub_item not in temp:\n                    temp += (sub_item,)\n            if temp:\n                result += (temp,)\n\n    for item in t:\n        process_item(item)\n\n    return result"}
{"task_id": "Mbpp/581", "completion": "def surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = (base_edge / 2) ** 2 + height ** 2\n    slant_height = slant_height ** 0.5\n    lateral_area = 4 * (1/2) * base_edge * slant_height\n    surface_area = base_area + lateral_area\n    return surface_area"}
{"task_id": "Mbpp/583", "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0], catalan[1] = 1, 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(dataset, n):\n    sorted_items = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "completion": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "completion": "def big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    result = []\n    for i in range(int(start**0.5) + 1, int(end**0.5) + 1):\n        if i * i >= start and i * i <= end:\n            result.append(i * i)\n    return result"}
{"task_id": "Mbpp/590", "completion": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\""}
{"task_id": "Mbpp/591", "completion": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": "Mbpp/592", "completion": "def sum_Of_product(n):\n    from math import comb\n    \n    total = 0\n    for i in range(n):\n        total += comb(n, i) * comb(n, i + 1)\n    \n    return total"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip):\n    parts = ip.split('.')\n    non_zero_parts = [part for part in parts if part != '0']\n    return '.'.join(non_zero_parts)"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even - first_odd if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/596", "completion": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\""}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    left1, left2 = 0, 0\n    while True:\n        if left1 == len(arr1):\n            return arr2[left2 + k - 1]\n        if left2 == len(arr2):\n            return arr1[left1 + k - 1]\n        if k == 1:\n            return min(arr1[left1], arr2[left2])\n        new_left1 = min(left1 + k // 2 - 1, len(arr1) - 1)\n        new_left2 = min(left2 + k // 2 - 1, len(arr2) - 1)\n        pivot1, pivot2 = arr1[new_left1], arr2[new_left2]\n        if pivot1 <= pivot2:\n            k -= new_left1 - left1 + 1\n            left1 = new_left1 + 1\n        else:\n            k -= new_left2 - left2 + 1\n            left2 = new_left2 + 1"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return num == sum"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    average_n = sum_n / n\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "completion": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    ludics = list(range(1, n + 1))\n    i = 1\n    while i < len(ludics):\n        remove_idx = i + ludics[i] - 1\n        if remove_idx < len(ludics):\n            del ludics[remove_idx::ludics[i]]\n        i += 1\n    return ludics"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(s):\n    return ' '.join(reversed(s.split()))"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "completion": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\""}
{"task_id": "Mbpp/607", "completion": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\""}
{"task_id": "Mbpp/608", "completion": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    if 0 <= k < len(lst):\n        return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "completion": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "completion": "def cummulative_sum(tuples_list):\n    total = 0\n    for tup in tuples_list:\n        total += sum(tup)\n    return total"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(a, b):\n    return tuple(x % y for x, y in zip(a, b))"}
{"task_id": "Mbpp/618", "completion": "def div_list(lst1, lst2):\n    return [a / b for a, b in zip(lst1, lst2)]"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    nums = ''.join([c for c in s if c.isdigit()])\n    letters = ''.join([c for c in s if not c.isdigit()])\n    return letters + nums"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(nums):\n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    max_size = 1\n    \n    for i in range(n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_size = max(max_size, dp[i])\n    \n    return max_size"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, n):\n    merged_list = []\n    i = 0\n    j = 0\n    \n    while i < n and j < n:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    while i < n:\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < n:\n        merged_list.append(list2[j])\n        j += 1\n    \n    mid = n // 2\n    if n % 2 == 0:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        return merged_list[mid]"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "completion": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "completion": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return (radius ** 2) * (3 ** 0.5) / 2"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(s):\n    return s.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "completion": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coord):\n    x, y = coord\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(s):\n    result = []\n    for char in s:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/632", "completion": "def move_zero(nums):\n    non_zero = [num for num in nums if num != 0]\n    zero = [0] * (len(nums) - len(non_zero))\n    return non_zero + zero"}
{"task_id": "Mbpp/633", "completion": "def pair_xor_Sum(arr, n):\n    result = 0\n    for i in range(32):\n        count = 0\n        for j in range(n):\n            if (arr[j] >> i) & 1:\n                count += 1\n        result += (count * (n - count) * (1 << i))\n    return result"}
{"task_id": "Mbpp/635", "completion": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\""}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(amount, cost):\n    return amount == cost"}
{"task_id": "Mbpp/638", "completion": "def wind_chill(v, t):\n    wci = 13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16\n    return round(wci)"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    return int(n * (7 * n - 5) / 2)"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(s):\n    import re\n    return bool(re.search(r'\\Bz\\B', s))"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    # Initialize the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    # Initialize the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    total_cost = dp[n-1][n-1]\n    num_cells = n * n - 1\n    return (total_cost / num_cells)"}
{"task_id": "Mbpp/722", "completion": "def filter_data(students, min_height, min_weight):\n    filtered_students = {name: data for name, data in students.items() if data[0] > min_height and data[1] > min_weight}\n    return filtered_students"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "completion": "def extract_quotation(s):\n    result = []\n    start = None\n    for i, char in enumerate(s):\n        if char == '\"':\n            if start is not None:\n                result.append(s[start:i])\n                start = None\n            elif s[i+1] != ' ':\n                start = i + 1\n        elif start is not None and char == ' ':\n            result.append(s[start:i])\n            start = None\n    if start is not None:\n        result.append(s[start:])\n    return result"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    result = ()\n    for i in range(len(t) - 1):\n        result += (t[i] * t[i + 1],)\n    return result"}
{"task_id": "Mbpp/728", "completion": "def sum_list(a, b):\n    return [a_i + b_i for a_i, b_i in zip(a, b)]"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "completion": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\""}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "completion": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    if n < 3:\n        return n\n    bit_length = n.bit_length()\n    mask = (1 << (bit_length - 1)) - 1 - 1\n    return n ^ mask"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(arr, target):\n    lo, hi = 0, len(arr)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if arr[mid] < target:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo"}
{"task_id": "Mbpp/737", "completion": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\""}
{"task_id": "Mbpp/739", "completion": "def find_Index(n):\n    low, high = 1, 10000\n    while low < high:\n        mid = (low + high) // 2\n        if mid * (mid + 1) // 2 < 10 ** (n - 1):\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tup):\n    result = {}\n    for i in range(0, len(tup), 2):\n        key = tup[i]\n        value = tup[i + 1] if i + 1 < len(tup) else None\n        result[key] = value\n    return result"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "completion": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\""}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, k):\n    n = len(lst)\n    k = k % n  # In case the rotation count is greater than list length\n    return lst[-k:] + lst[:-k]"}
{"task_id": "Mbpp/744", "completion": "def check_none(tup):\n    return None in tup"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    def all_divisible_by_digits(n):\n        for digit in str(n):\n            if digit == '0' or n % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all_divisible_by_digits(num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s):\n    return s[0].upper() + ''.join(' ' + c if c.isupper() else c for c in s[1:])"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    lst += list(tup)"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b - a\n        return b"}
{"task_id": "Mbpp/753", "completion": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(nums):\n    if len(nums) < 2:\n        return None\n    first = second = float('inf')\n    for n in nums:\n        if n < first:\n            second = first\n            first = n\n        elif n < second and n != first:\n            second = n\n    return second if second != float('inf') else None"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(lst):\n    from collections import defaultdict\n    \n    count_dict = defaultdict(int)\n    for sublist in lst:\n        count_dict(tuple(sublist)) += 1\n    \n    return dict(count_dict)"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s):\n    import re\n    pattern = r'^-?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month):\n    return month in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "completion": "def is_polite(n):\n    count, num = 0, 0\n    while count < n:\n        num += 1\n        if bin(num).count('1') > 1:\n            count += 1\n    return num"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "completion": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2] + [item for item in list2 if item not in list1]"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    return sum((2 * i - 1) ** 4 for i in range(1, n + 1))"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            continue\n    return stack == []"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(string, substring):\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1: \n            return None\n        yield substring, start, start + len(substring)\n        start += 1"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "completion": "def find_sum(arr):\n    from collections import Counter\n    element_count = Counter(arr)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed_list = [[lst[0]]]\n    for item in lst[1:]:\n        if item == packed_list[-1][0]:\n            packed_list[-1].append(item)\n        else:\n            packed_list.append([item])\n    \n    return packed_list"}
{"task_id": "Mbpp/780", "completion": "def find_combinations(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            result.append((lst[i][0] + lst[j][0], lst[i][1] + lst[j][1]))\n            result.append((lst[i][0] + lst[j][1], lst[i][1] + lst[j][0]))\n    return result"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(i, i + j // 2 + 1):\n                total_sum += arr[k]\n    return total_sum"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in lst:\n        if num % 2 != 0:\n            odd = num\n            break\n    \n    return even * odd if even is not None and odd is not None else 0"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(s):\n    return tuple(int(x) for x in s[1:-2].split(\", \"))"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(arr, target):\n    lo, hi = 0, len(arr)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if arr[mid] <= target:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo"}
{"task_id": "Mbpp/787", "completion": "def text_match_three(text):\n    import re\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(lst, s):\n    return tuple(lst + [s])"}
{"task_id": "Mbpp/790", "completion": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(tup):\n    result = ()\n    for item in tup:\n        if not isinstance(item, tuple):\n            result += (item,)\n    return result"}
{"task_id": "Mbpp/792", "completion": "def count_list(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "completion": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/794", "completion": "def text_starta_endb(s):\n    import re\n    return bool(re.match(r'^a.*b$', s))"}
{"task_id": "Mbpp/796", "completion": "def return_sum(d):\n    return sum(d.values())"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    return sum(x for x in range(l, r+1) if x % 2 != 0)"}
{"task_id": "Mbpp/798", "completion": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    d = d % 32\n    n &= 0xFFFFFFFF\n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif (a == b or b == c or a == c):\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "completion": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lists):\n    return max(lists, key=sum)"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s):\n    max_length = 0\n    current_length = 0\n    \n    for char in s:\n        if char.isupper():\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    \n    return max_length"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "completion": "def check_K(tuples, k):\n    return k in tuples"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(t1, t2):\n    return all(x > y for x, y in zip(t1, t2))"}
