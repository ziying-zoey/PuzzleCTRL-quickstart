{"name": "MBPP/Mbpp/2", "prompt": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n", "signature": "\ndef similar_elements(test_tup1, test_tup2):\n    pass\n", "entry_point": "similar_elements", "tests": ["\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/3", "prompt": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n", "signature": "def is_not_prime(n):\n    pass\n", "entry_point": "is_not_prime", "tests": ["\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/6", "prompt": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n", "signature": "\ndef is_Power_Of_Two(x: int):\n    pass\n", "entry_point": "differ_At_One_Bit_Pos", "tests": ["\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\n", "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$ \n"]}
{"name": "MBPP/Mbpp/7", "prompt": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n", "signature": "def find_char_long(text):\n    pass\n", "entry_point": "find_char_long", "tests": ["\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n", "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/8", "prompt": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n", "signature": "\ndef square_nums(nums):\n    pass\n", "entry_point": "square_nums", "tests": ["\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])\n", "\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/9", "prompt": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n", "signature": "\ndef find_Rotations(s):\n    pass\n", "entry_point": "find_Rotations", "tests": ["\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3\n", "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/11", "prompt": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n", "signature": "\ndef remove_Occ(s,ch):\n    pass\n", "entry_point": "remove_Occ", "tests": ["\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"\n", "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/12", "prompt": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n", "signature": "\ndef sort_matrix(M):\n    pass\n", "entry_point": "sort_matrix", "tests": ["\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n", "\n    assert isinstance(M, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(M[0]) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in M for item in row), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/14", "prompt": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n", "signature": "\ndef find_Volume(l,b,h) :\n    pass\n", "entry_point": "find_Volume", "tests": ["\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1\n", "\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/16", "prompt": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n", "signature": "def text_lowercase_underscore(text):\n    pass\n", "entry_point": "text_lowercase_underscore", "tests": ["\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)\n", "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        assert len(text) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/17", "prompt": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n", "signature": "\ndef square_perimeter(a):\n    pass\n", "entry_point": "square_perimeter", "tests": ["\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16\n", "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/18", "prompt": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n", "signature": "\ndef remove_dirty_chars(string, second_string):\n    pass\n", "entry_point": "remove_dirty_chars", "tests": ["\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n", "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/19", "prompt": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n", "signature": "\ndef test_duplicate(arraynums):\n    pass\n", "entry_point": "test_duplicate", "tests": ["\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n", "\n    assert isinstance(arraynums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/20", "prompt": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n", "signature": "\ndef is_woodall(x):\n    pass\n", "entry_point": "is_woodall", "tests": ["\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False\n", "\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/56", "prompt": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n", "signature": "\ndef check(n):\n    pass\n", "entry_point": "check", "tests": ["\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/57", "prompt": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n", "signature": "\ndef find_Max_Num(arr) :\n    pass\n", "entry_point": "find_Max_Num", "tests": ["\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/58", "prompt": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n", "signature": "\ndef opposite_Signs(x,y):\n    pass\n", "entry_point": "opposite_Signs", "tests": ["\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True\n", "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/59", "prompt": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n", "signature": "\ndef is_octagonal(n):\n    pass\n", "entry_point": "is_octagonal", "tests": ["\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/61", "prompt": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n", "signature": "def count_Substrings(s):\n    pass\n", "entry_point": "count_Substrings", "tests": ["\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12\n", "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert s.isdigit(), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/62", "prompt": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n", "signature": "\ndef smallest_num(xs):\n    pass\n", "entry_point": "smallest_num", "tests": ["\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n", "\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/63", "prompt": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n", "signature": "\ndef max_difference(test_list):\n    pass\n", "entry_point": "max_difference", "tests": ["\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) and len(item) == 2 for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/64", "prompt": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n", "signature": "\ndef subject_marks(subjectmarks):\n    pass\n", "entry_point": "subject_marks", "tests": ["\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n", "\n assert isinstance(subjectmarks, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(item, tuple) and len(item) >= 2 for item in subjectmarks), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(item[1], (int, float)) for item in subjectmarks), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/65", "prompt": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n", "signature": "\ndef recursive_list_sum(data_list):\n    pass\n", "entry_point": "recursive_list_sum", "tests": ["\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n", "\n\tdef list_check(l): # $_CONTRACT_$\n\t\tif not isinstance(l, list): # $_CONTRACT_$\n\t\t\treturn isinstance(l, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(list_check(item) for item in l) # $_CONTRACT_$\n\tassert isinstance(data_list, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert list_check(data_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/66", "prompt": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "signature": "\ndef pos_count(l):\n    pass\n", "entry_point": "pos_count", "tests": ["\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4\n", "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/67", "prompt": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n", "signature": "\ndef bell_number(n):\n    pass\n", "entry_point": "bell_number", "tests": ["\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/68", "prompt": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "signature": "\ndef is_Monotonic(A):\n    pass\n", "entry_point": "is_Monotonic", "tests": ["\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False\n", "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/69", "prompt": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n", "signature": "\ndef is_sublist(l, s):\n    pass\n", "entry_point": "is_sublist", "tests": ["\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False\n", "\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/70", "prompt": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n", "signature": "\ndef get_equal(Input):\n    pass\n", "entry_point": "get_equal", "tests": ["\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True\n", "\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/71", "prompt": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n", "signature": "\ndef comb_sort(nums):\n    pass\n", "entry_point": "comb_sort", "tests": ["\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n", "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/72", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "signature": "\ndef dif_Square(n):\n    pass\n", "entry_point": "dif_Square", "tests": ["\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/74", "prompt": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n", "signature": "\ndef is_samepatterns(colors, patterns):\n    pass\n", "entry_point": "is_samepatterns", "tests": ["\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n", "\n    assert isinstance(colors, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(patterns, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/75", "prompt": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n", "signature": "\ndef find_tuples(test_list, K):\n    pass\n", "entry_point": "find_tuples", "tests": ["\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for tuple in test_list for item in tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  assert K > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/77", "prompt": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n", "signature": "\ndef is_Diff(n):\n    pass\n", "entry_point": "is_Diff", "tests": ["\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/79", "prompt": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n", "signature": "\ndef word_len(s):\n    pass\n", "entry_point": "word_len", "tests": ["\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True\n", "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert s.isalpha(), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/80", "prompt": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n", "signature": "\ndef tetrahedral_number(n):\n    pass\n", "entry_point": "tetrahedral_number", "tests": ["\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/82", "prompt": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n", "signature": "def volume_sphere(r):\n    pass\n", "entry_point": "volume_sphere", "tests": ["import math\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)\n", "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/84", "prompt": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n", "signature": "\ndef sequence(n):\n    pass\n", "entry_point": "sequence", "tests": ["\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/85", "prompt": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n", "signature": "def surfacearea_sphere(r):\n    pass\n", "entry_point": "surfacearea_sphere", "tests": ["import math\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)\n", "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/86", "prompt": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n", "signature": "\ndef centered_hexagonal_number(n):\n    pass\n", "entry_point": "centered_hexagonal_number", "tests": ["\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\n", "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/87", "prompt": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n", "signature": "def merge_dictionaries_three(dict1,dict2, dict3):\n    pass\n", "entry_point": "merge_dictionaries_three", "tests": ["\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n", "\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(dict2, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(dict3, dict), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/88", "prompt": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n", "signature": "def freq_count(list1):\n    pass\n", "entry_point": "freq_count", "tests": ["\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n", "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/89", "prompt": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n", "signature": "\ndef closest_num(N):\n    pass\n", "entry_point": "closest_num", "tests": ["\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11\n", "\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/90", "prompt": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n", "signature": "\ndef len_log(list1):\n    pass\n", "entry_point": "len_log", "tests": ["\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/91", "prompt": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n", "signature": "\ndef find_substring(str1, sub_str):\n    pass\n", "entry_point": "find_substring", "tests": ["\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n", "\n   assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n   assert all(isinstance(item, str) for item in str1), \"invalid inputs\" # $_CONTRACT_$\n   assert isinstance(sub_str, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/92", "prompt": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n", "signature": "\ndef is_undulating(n):\n    pass\n", "entry_point": "is_undulating", "tests": ["\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/93", "prompt": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n", "signature": "\ndef power(a, b):\n    pass\n", "entry_point": "power", "tests": ["\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125\n", "\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/94", "prompt": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n", "signature": "def index_minimum(test_list):\n    pass\n", "entry_point": "index_minimum", "tests": ["\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n", "\n  assert isinstance(test_list, list) and len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) and len(item) >= 2 for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item[1], (int, float)) for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/95", "prompt": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n", "signature": "\ndef Find_Min_Length(lst):\n    pass\n", "entry_point": "Find_Min_Length", "tests": ["\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n", "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in lst), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/96", "prompt": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n", "signature": "\ndef divisor(n):\n    pass\n", "entry_point": "divisor", "tests": ["\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3\n", "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/97", "prompt": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n", "signature": "\ndef frequency_lists(list1):\n    pass\n", "entry_point": "frequency_lists", "tests": ["\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n", "\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/98", "prompt": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n", "signature": "\ndef multiply_num(numbers):\n    pass\n", "entry_point": "multiply_num", "tests": ["import math\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)\n", "\n    assert isinstance(numbers, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(numbers) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in numbers), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/99", "prompt": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n", "signature": "\ndef decimal_to_binary(n):\n    pass\n", "entry_point": "decimal_to_binary", "tests": ["\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/100", "prompt": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n", "signature": "\ndef next_smallest_palindrome(num):\n    pass\n", "entry_point": "next_smallest_palindrome", "tests": ["\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121\n", "\n    assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n    assert num >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/101", "prompt": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n", "signature": "\ndef kth_element(arr, k):\n    pass\n", "entry_point": "kth_element", "tests": ["\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36\n", "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$ \n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/102", "prompt": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n", "signature": "\ndef snake_to_camel(word):\n    pass\n", "entry_point": "snake_to_camel", "tests": ["\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')\n", "\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(word) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/103", "prompt": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n", "signature": "\ndef eulerian_num(n, m):\n    pass\n", "entry_point": "eulerian_num", "tests": ["\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/104", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "signature": "\ndef sort_sublists(input_list):\n    pass\n", "entry_point": "sort_sublists", "tests": ["\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n", "\n    assert isinstance(input_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(all(isinstance(y, str) for y in x) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/105", "prompt": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n", "signature": "\ndef count(lst):\n    pass\n", "entry_point": "count", "tests": ["\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3\n", "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/106", "prompt": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n", "signature": "\ndef add_lists(test_list, test_tup):\n    pass\n", "entry_point": "add_lists", "tests": ["\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/108", "prompt": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "signature": "def merge_sorted_list(num1,num2,num3):\n    pass\n", "entry_point": "merge_sorted_list", "tests": ["\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n", "\n  assert isinstance(num1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num3, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/109", "prompt": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n", "signature": "\ndef odd_Equivalent(s,n):\n    pass\n", "entry_point": "odd_Equivalent", "tests": ["\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2\n", "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/111", "prompt": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n", "signature": "\ndef common_in_nested_lists(nestedlist):\n    pass\n", "entry_point": "common_in_nested_lists", "tests": ["\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n", "\n    assert isinstance(nestedlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in nestedlist), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/113", "prompt": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n", "signature": "\ndef check_integer(text):\n    pass\n", "entry_point": "check_integer", "tests": ["\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\n", "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/116", "prompt": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n", "signature": "\ndef tuple_to_int(nums):\n    pass\n", "entry_point": "tuple_to_int", "tests": ["\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567\n", "\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x > 0 for x in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/118", "prompt": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n", "signature": "\ndef string_to_list(string):\n    pass\n", "entry_point": "string_to_list", "tests": ["\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']\n", "\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/119", "prompt": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n", "signature": "\ndef search(arr):\n    pass\n", "entry_point": "search", "tests": ["\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/120", "prompt": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n", "signature": "\ndef max_product_tuple(list1):\n    pass\n", "entry_point": "max_product_tuple", "tests": ["\nassert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(10,20), (15,2), (5,10)] ), 200, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ), 484, rel_tol=0.001)\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[0], (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/123", "prompt": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n", "signature": "\ndef div_sum(num):\n    pass\n", "entry_point": "amicable_numbers_sum", "tests": ["\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0\n", "\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    assert limit >= 1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/124", "prompt": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n", "signature": "def angle_complex(a,b):\n    pass\n", "entry_point": "angle_complex", "tests": ["import math\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)\n", "\n  assert isinstance(a, (int, float)) or isinstance(a, float), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, complex) or isinstance(b, float), \"invalid inputs\" # $_CONTRACT_$\n  assert b.real == 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/125", "prompt": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n", "signature": "\ndef find_length(string):\n    pass\n", "entry_point": "find_length", "tests": ["\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2\n", "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert all([c in '01' for c in string]), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/126", "prompt": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n", "signature": "def sum(a,b):\n    pass\n", "entry_point": "sum", "tests": ["\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3\n", "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/127", "prompt": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n", "signature": "\ndef multiply_int(x, y):\n    pass\n", "entry_point": "multiply_int", "tests": ["\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32\n", "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/128", "prompt": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n", "signature": "\ndef long_words(n, s):\n    pass\n", "entry_point": "long_words", "tests": ["\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/129", "prompt": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n", "signature": "\ndef magic_square_test(my_matrix):\n    pass\n", "entry_point": "magic_square_test", "tests": ["\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n", "\n    assert isinstance(my_matrix, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(my_matrix) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in my_matrix), \"invalid inputs\" # $_CONTRACT_$\n    assert len(my_matrix[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(my_matrix[0]) for row in my_matrix), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in my_matrix for item in row), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/130", "prompt": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n", "signature": "def max_occurrences(nums):\n    pass\n", "entry_point": "max_occurrences", "tests": ["\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20\n", "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "signature": "\ndef reverse_vowels(str1):\n    pass\n", "entry_point": "reverse_vowels", "tests": ["\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"\n", "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/132", "prompt": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n", "signature": "\ndef tup_string(tup1):\n    pass\n", "entry_point": "tup_string", "tests": ["\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n", "\n  assert isinstance(tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, str) for item in tup1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/133", "prompt": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "signature": "\ndef sum_negativenum(nums):\n    pass\n", "entry_point": "sum_negativenum", "tests": ["\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n", "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/135", "prompt": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n", "signature": "\ndef hexagonal_num(n):\n    pass\n", "entry_point": "hexagonal_num", "tests": ["\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/137", "prompt": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n", "signature": "\ndef zero_count(nums):\n    pass\n", "entry_point": "zero_count", "tests": ["import math\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n", "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/138", "prompt": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "signature": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    pass\n", "entry_point": "is_Sum_Of_Powers_Of_Two", "tests": ["\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/139", "prompt": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n", "signature": "def circle_circumference(r):\n    pass\n", "entry_point": "circle_circumference", "tests": ["import math\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)\n", "\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/140", "prompt": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n", "signature": "\ndef extract_singly(test_list):\n    pass\n", "entry_point": "extract_singly", "tests": ["\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])\n", "\n  assert isinstance(test_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/141", "prompt": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n", "signature": "\ndef pancake_sort(nums):\n    pass\n", "entry_point": "pancake_sort", "tests": ["\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n", "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/142", "prompt": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n", "signature": "\ndef count_samepair(list1,list2,list3):\n    pass\n", "entry_point": "count_samepair", "tests": ["\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/145", "prompt": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n", "signature": "\ndef max_Abs_Diff(arr):\n    pass\n", "entry_point": "max_Abs_Diff", "tests": ["\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2\n", "\n    assert isinstance(arr, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/160", "prompt": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n", "signature": "\ndef find_solution(a, b, n):\n    pass\n", "entry_point": "find_solution", "tests": ["\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)\n", "\n\tassert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/161", "prompt": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n", "signature": "\ndef remove_elements(list1, list2):\n    pass\n", "entry_point": "remove_elements", "tests": ["\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/162", "prompt": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n", "signature": "\ndef sum_series(n):\n    pass\n", "entry_point": "sum_series", "tests": ["\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25\n", "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/165", "prompt": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n", "signature": "\ndef count_char_position(str1):\n    pass\n", "entry_point": "count_char_position", "tests": ["\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5\n", "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x.isalpha() for x in str1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/166", "prompt": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n", "signature": "\ndef find_even_pair(A):\n    pass\n", "entry_point": "find_even_pair", "tests": ["\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n", "\n  assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/167", "prompt": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n", "signature": "\ndef next_power_of_2(n):\n    pass\n", "entry_point": "next_power_of_2", "tests": ["\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32\n", "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/168", "prompt": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n", "signature": "\ndef frequency(a,x):\n    pass\n", "entry_point": "frequency", "tests": ["\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2\n", "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/170", "prompt": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n", "signature": "\ndef sum_range_list(list1, m, n):\n    pass\n", "entry_point": "sum_range_list", "tests": ["\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/171", "prompt": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n", "signature": "\ndef perimeter_pentagon(a):\n    pass\n", "entry_point": "perimeter_pentagon", "tests": ["\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75\n", "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/172", "prompt": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n", "signature": "\ndef count_occurance(s):\n    pass\n", "entry_point": "count_occurance", "tests": ["\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0\n", "\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/222", "prompt": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n", "signature": "\ndef check_type(test_tuple):\n    pass\n", "entry_point": "check_type", "tests": ["\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True\n", "\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(test_tuple) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/223", "prompt": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n", "signature": "def is_majority(arr, n, x):\n    pass\n", "entry_point": "is_majority", "tests": ["\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n", "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(item, (int, float)) for item in arr), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(a <= b for a, b in zip(arr[:n], arr[1:n])), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) <= n, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/224", "prompt": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "signature": "\ndef count_Set_Bits(n):\n    pass\n", "entry_point": "count_Set_Bits", "tests": ["\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/226", "prompt": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n", "signature": "\ndef odd_values_string(str1):\n    pass\n", "entry_point": "odd_values_string", "tests": ["\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'\n", "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/227", "prompt": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n", "signature": "\ndef min_of_three(a,b,c):\n    pass\n", "entry_point": "min_of_three", "tests": ["\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30\n", "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/230", "prompt": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n", "signature": "\ndef replace_blank(str1, char):\n    pass\n", "entry_point": "replace_blank", "tests": ["\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n", "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/232", "prompt": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n", "signature": "def larg_nnum(list1, n):\n    pass\n", "entry_point": "larg_nnum", "tests": ["\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/233", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n", "signature": "def lateralsuface_cylinder(r, h):\n    pass\n", "entry_point": "lateralsuface_cylinder", "tests": ["import math\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)\n", "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/234", "prompt": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n", "signature": "\ndef volume_cube(l):\n    pass\n", "entry_point": "volume_cube", "tests": ["\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125\n", "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/235", "prompt": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n", "signature": "\ndef even_bit_set_number(n):\n    pass\n", "entry_point": "even_bit_set_number", "tests": ["\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/237", "prompt": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n", "signature": "def check_occurences(test_list):\n    pass\n", "entry_point": "check_occurences", "tests": ["\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/238", "prompt": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n", "signature": "\ndef number_of_substrings(str1):\n    pass\n", "entry_point": "number_of_substrings", "tests": ["\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15\n", "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/239", "prompt": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n", "signature": "\ndef get_total_number_of_sequences(m, n):\n    pass\n", "entry_point": "get_total_number_of_sequences", "tests": ["\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84\n", "\n\tassert isinstance(m, int) and m > 0, \"invalid inputs\" # $_CONTRACT_$ \n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/240", "prompt": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n", "signature": "\ndef replace_list(list1, list2):\n    pass\n", "entry_point": "replace_list", "tests": ["\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/242", "prompt": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n", "signature": "\ndef count_charac(str1):\n    pass\n", "entry_point": "count_charac", "tests": ["\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5\n", "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/244", "prompt": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n", "signature": "def next_Perfect_Square(N):\n    pass\n", "entry_point": "next_Perfect_Square", "tests": ["\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16\n", "\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/245", "prompt": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n", "signature": "\ndef max_sum(arr):\n    pass\n", "entry_point": "max_sum", "tests": ["\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n", "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/247", "prompt": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n", "signature": "\ndef lps(str1):\n    pass\n", "entry_point": "lps", "tests": ["\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9\n", "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/250", "prompt": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n", "signature": "\ndef count_X(tup, x):\n    pass\n", "entry_point": "count_X", "tests": ["\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n", "\n    assert isinstance(tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/251", "prompt": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n", "signature": "\ndef insert_element(list1, element):\n    pass\n", "entry_point": "insert_element", "tests": ["\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/252", "prompt": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "signature": "def convert(numbers):\n    pass\n", "entry_point": "convert", "tests": ["\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)\n", "\n  assert isinstance(numbers, (int, float, complex)), \"invalid inputs\" # $_CONTRACT_$ \n"]}
{"name": "MBPP/Mbpp/253", "prompt": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n", "signature": "\ndef count_integer(list1):\n    pass\n", "entry_point": "count_integer", "tests": ["\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/255", "prompt": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n", "signature": "def combinations_colors(l, n):\n    pass\n", "entry_point": "combinations_colors", "tests": ["\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n", "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/256", "prompt": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n", "signature": "\ndef count_Primes_nums(n):\n    pass\n", "entry_point": "count_Primes_nums", "tests": ["\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25\n", "\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n"]}
{"name": "MBPP/Mbpp/257", "prompt": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n", "signature": "\ndef swap_numbers(a,b):\n    pass\n", "entry_point": "swap_numbers", "tests": ["\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)\n", "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/259", "prompt": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n", "signature": "\ndef maximize_elements(test_tup1, test_tup2):\n    pass\n", "entry_point": "maximize_elements", "tests": ["\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/260", "prompt": "\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n", "signature": "\ndef newman_prime(n):\n    pass\n", "entry_point": "newman_prime", "tests": ["\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/261", "prompt": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n", "signature": "\ndef division_elements(test_tup1, test_tup2):\n    pass\n", "entry_point": "division_elements", "tests": ["\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) and ele != 0 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/262", "prompt": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n", "signature": "\ndef split_two_parts(list1, L):\n    pass\n", "entry_point": "split_two_parts", "tests": ["\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(L, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/264", "prompt": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n", "signature": "\ndef dog_age(h_age):\n    pass\n", "entry_point": "dog_age", "tests": ["\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109\n", "\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert h_age >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/265", "prompt": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n", "signature": "\ndef list_split(S, step):\n    pass\n", "entry_point": "list_split", "tests": ["\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n", "\n    assert isinstance(S, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(step, int), \"invalid inputs\" # $_CONTRACT_$\n    assert step > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/266", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n", "signature": "\ndef lateralsurface_cube(l):\n    pass\n", "entry_point": "lateralsurface_cube", "tests": ["\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400\n", "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/267", "prompt": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n", "signature": "\ndef square_Sum(n):\n    pass\n", "entry_point": "square_Sum", "tests": ["\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/268", "prompt": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "signature": "\ndef find_star_num(n):\n    pass\n", "entry_point": "find_star_num", "tests": ["\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/269", "prompt": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n", "signature": "\ndef ascii_value(k):\n    pass\n", "entry_point": "ascii_value", "tests": ["\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\n", "\n  assert isinstance(k, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/270", "prompt": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n", "signature": "\ndef sum_even_and_even_index(arr):\n    pass\n", "entry_point": "sum_even_and_even_index", "tests": ["\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/271", "prompt": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n", "signature": "\ndef even_Power_Sum(n):\n    pass\n", "entry_point": "even_Power_Sum", "tests": ["\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/272", "prompt": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n", "signature": "\ndef rear_extract(test_list):\n    pass\n", "entry_point": "rear_extract", "tests": ["\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/273", "prompt": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n", "signature": "\ndef substract_elements(test_tup1, test_tup2):\n    pass\n", "entry_point": "substract_elements", "tests": ["\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/274", "prompt": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n", "signature": "def even_binomial_Coeff_Sum( n):\n    pass\n", "entry_point": "even_binomial_Coeff_Sum", "tests": ["\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/276", "prompt": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n", "signature": "def volume_cylinder(r,h):\n    pass\n", "entry_point": "volume_cylinder", "tests": ["import math\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)\n", "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/277", "prompt": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n", "signature": "\ndef dict_filter(dict1, n):\n    pass\n", "entry_point": "dict_filter", "tests": ["\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n", "\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/278", "prompt": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n", "signature": "\ndef count_first_elements(test_tup):\n    pass\n", "entry_point": "count_first_elements", "tests": ["\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/279", "prompt": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n", "signature": "\ndef is_num_decagonal(n):\n    pass\n", "entry_point": "is_num_decagonal", "tests": ["\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/280", "prompt": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n", "signature": "\ndef sequential_search(dlist, item):\n    pass\n", "entry_point": "sequential_search", "tests": ["\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n", "\n    assert isinstance(dlist, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/281", "prompt": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n", "signature": "\ndef all_unique(test_list):\n    pass\n", "entry_point": "all_unique", "tests": ["\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True\n", "\n    assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/282", "prompt": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n", "signature": "\ndef sub_list(nums1,nums2):\n    pass\n", "entry_point": "sub_list", "tests": ["\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]\n", "\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/283", "prompt": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n", "signature": "\ndef validate(n):\n    pass\n", "entry_point": "validate", "tests": ["\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/284", "prompt": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n", "signature": "\ndef check_element(list1, element):\n    pass\n", "entry_point": "check_element", "tests": ["\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n", "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, type(element)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/285", "prompt": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n", "signature": "def text_match_two_three(text):\n    pass\n", "entry_point": "text_match_two_three", "tests": ["\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)\n", "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/286", "prompt": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "signature": "\ndef max_sub_array_sum_repeated(a, n, k):\n    pass\n", "entry_point": "max_sub_array_sum_repeated", "tests": ["\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n", "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(a) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int) and n == len(a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int) and k >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/287", "prompt": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n", "signature": "\ndef square_Sum(n):\n    pass\n", "entry_point": "square_Sum", "tests": ["\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/290", "prompt": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "signature": "\ndef max_length(list1):\n    pass\n", "entry_point": "max_length", "tests": ["\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/292", "prompt": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n", "signature": "\ndef find(n,m):\n    pass\n", "entry_point": "find", "tests": ["\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert m != 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/293", "prompt": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n", "signature": "def otherside_rightangle(w,h):\n    pass\n", "entry_point": "otherside_rightangle", "tests": ["\nassert math.isclose(otherside_rightangle(7,8), 10.63014581273465, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(3,4), 5, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(7,15), 16.55294535724685, rel_tol=0.001)\n", "\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/294", "prompt": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n", "signature": "\ndef max_val(listval):\n    pass\n", "entry_point": "max_val", "tests": ["\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50\n", "\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/296", "prompt": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n", "signature": "\ndef get_Inv_Count(arr):\n    pass\n", "entry_point": "get_Inv_Count", "tests": ["\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/297", "prompt": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n", "signature": "\ndef flatten_list(list1):\n    pass\n", "entry_point": "flatten_list", "tests": ["\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n", "\n\tdef list_check(l): # $_CONTRACT_$\n\t\tif not isinstance(l, list): # $_CONTRACT_$\n\t\t\treturn isinstance(l, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(list_check(item) for item in l) # $_CONTRACT_$\n\tassert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert list_check(list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/299", "prompt": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n", "signature": "def max_aggregate(stdata):\n    pass\n", "entry_point": "max_aggregate", "tests": ["\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n", "\n    assert isinstance(stdata, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/300", "prompt": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n", "signature": "\ndef count_binary_seq(n):\n    pass\n", "entry_point": "count_binary_seq", "tests": ["import math\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)\n", "\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/301", "prompt": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n", "signature": "\ndef dict_depth_aux(d):\n    pass\n", "entry_point": "dict_depth", "tests": ["\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n", "\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/305", "prompt": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n", "signature": "def start_withp(words):\n    pass\n", "entry_point": "start_withp", "tests": ["\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n", "\n    assert isinstance(words, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/306", "prompt": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "signature": "\ndef max_sum_increasing_subseq(a, n, index, k):\n    pass\n", "entry_point": "max_sum_increasing_subseq", "tests": ["\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n", "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n == len(a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(index, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert 0 <= index < n, \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert index < k < n, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/308", "prompt": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n", "signature": "\ndef large_product(nums1, nums2, N):\n    pass\n", "entry_point": "large_product", "tests": ["\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n", "\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/309", "prompt": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n", "signature": "\ndef maximum(a,b):\n    pass\n", "entry_point": "maximum", "tests": ["\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9\n", "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/310", "prompt": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n", "signature": "\ndef string_to_tuple(str1):\n    pass\n", "entry_point": "string_to_tuple", "tests": ["\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n", "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/311", "prompt": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "signature": "\ndef set_left_most_unset_bit(n):\n    pass\n", "entry_point": "set_left_most_unset_bit", "tests": ["\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\n", "\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/312", "prompt": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n", "signature": "def volume_cone(r,h):\n    pass\n", "entry_point": "volume_cone", "tests": ["import math\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)\n", "\n  assert isinstance(r, (int, float)) and r > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/388", "prompt": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "signature": "\ndef highest_Power_of_2(n):\n    pass\n", "entry_point": "highest_Power_of_2", "tests": ["\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/389", "prompt": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n", "signature": "\ndef find_lucas(n):\n    pass\n", "entry_point": "find_lucas", "tests": ["\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\n", "\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/390", "prompt": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n", "signature": "\ndef add_string(list_, string):\n    pass\n", "entry_point": "add_string", "tests": ["\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n", "\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/391", "prompt": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n", "signature": "\ndef convert_list_dictionary(l1, l2, l3):\n    pass\n", "entry_point": "convert_list_dictionary", "tests": ["\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n", "\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/392", "prompt": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n", "signature": "\ndef get_max_sum (n):\n    pass\n", "entry_point": "get_max_sum", "tests": ["\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/394", "prompt": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "signature": "\ndef check_distinct(test_tup):\n    pass\n", "entry_point": "check_distinct", "tests": ["\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/395", "prompt": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "signature": "\ndef first_non_repeating_character(str1):\n    pass\n", "entry_point": "first_non_repeating_character", "tests": ["\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\n", "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(str1) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/397", "prompt": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n", "signature": "\ndef median_numbers(a,b,c):\n    pass\n", "entry_point": "median_numbers", "tests": ["\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0\n", "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/398", "prompt": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n", "signature": "\ndef sum_of_digits(nums):\n    pass\n", "entry_point": "sum_of_digits", "tests": ["\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19\n", "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/404", "prompt": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n", "signature": "\ndef minimum(a,b):\n    pass\n", "entry_point": "minimum", "tests": ["\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0\n", "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n"]}
{"name": "MBPP/Mbpp/405", "prompt": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "signature": "\ndef check_tuplex(tuplex, element):\n    pass\n", "entry_point": "check_tuplex", "tests": ["\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n", "\n  assert isinstance(tuplex, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/406", "prompt": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n", "signature": "\ndef find_Parity(x):\n    pass\n", "entry_point": "find_Parity", "tests": ["\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False\n", "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/409", "prompt": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n", "signature": "\ndef min_product_tuple(list1):\n    pass\n", "entry_point": "min_product_tuple", "tests": ["\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/410", "prompt": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n", "signature": "\ndef min_val(listval):\n    pass\n", "entry_point": "min_val", "tests": ["\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20\n", "\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/412", "prompt": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n", "signature": "\ndef remove_odd(l):\n    pass\n", "entry_point": "remove_odd", "tests": ["\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]\n", "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/413", "prompt": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n", "signature": "\ndef extract_nth_element(list1, n):\n    pass\n", "entry_point": "extract_nth_element", "tests": ["\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(tup, tuple) for tup in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all(n < len(tup) for tup in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/414", "prompt": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "signature": "\ndef overlapping(list1,list2):\n    pass\n", "entry_point": "overlapping", "tests": ["\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/415", "prompt": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "signature": "\ndef max_Product(arr):\n    pass\n", "entry_point": "max_Product", "tests": ["\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/418", "prompt": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "signature": "\ndef Find_Max(lst):\n    pass\n", "entry_point": "Find_Max", "tests": ["\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n", "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/419", "prompt": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n", "signature": "\ndef round_and_sum(list1):\n    pass\n", "entry_point": "round_and_sum", "tests": ["\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513\n", "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/420", "prompt": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n", "signature": "\ndef cube_Sum(n):\n    pass\n", "entry_point": "cube_Sum", "tests": ["\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/421", "prompt": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n", "signature": "\ndef concatenate_tuple(test_tup):\n    pass\n", "entry_point": "concatenate_tuple", "tests": ["\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n", "\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/422", "prompt": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n", "signature": "\ndef find_Average_Of_Cube(n):\n    pass\n", "entry_point": "find_Average_Of_Cube", "tests": ["\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/424", "prompt": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n", "signature": "\ndef extract_rear(test_tuple):\n    pass\n", "entry_point": "extract_rear", "tests": ["\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n", "\n  assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, str) for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) > 0 for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/425", "prompt": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n", "signature": "\ndef count_element_in_list(list1, x):\n    pass\n", "entry_point": "count_element_in_list", "tests": ["\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/426", "prompt": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n", "signature": "\ndef filter_oddnumbers(nums):\n    pass\n", "entry_point": "filter_oddnumbers", "tests": ["\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n", "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/427", "prompt": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n", "signature": "def change_date_format(dt):\n    pass\n", "entry_point": "change_date_format", "tests": ["\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\n", "\n    assert isinstance(dt, str), \"invalid inputs\" # $_CONTRACT_$\n    assert re.match(r'\\d{4}-\\d{1,2}-\\d{1,2}', dt), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/428", "prompt": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n", "signature": "\ndef shell_sort(my_list):\n    pass\n", "entry_point": "shell_sort", "tests": ["\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n", "\n    assert isinstance(my_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/429", "prompt": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "signature": "\ndef and_tuples(test_tup1, test_tup2):\n    pass\n", "entry_point": "and_tuples", "tests": ["\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/430", "prompt": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n", "signature": "\ndef parabola_directrix(a, b, c):\n    pass\n", "entry_point": "parabola_directrix", "tests": ["\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130\n", "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/432", "prompt": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n", "signature": "\ndef median_trapezium(base1,base2,height):\n    pass\n", "entry_point": "median_trapezium", "tests": ["\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5\n", "\n    assert isinstance(base1, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(base2, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/433", "prompt": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n", "signature": "\ndef check_greater(arr, number):\n    pass\n", "entry_point": "check_greater", "tests": ["\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True\n", "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(number, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/435", "prompt": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n", "signature": "\ndef last_Digit(n) :\n    pass\n", "entry_point": "last_Digit", "tests": ["\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/436", "prompt": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n", "signature": "\ndef neg_nos(list1):\n    pass\n", "entry_point": "neg_nos", "tests": ["\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]\n", "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/437", "prompt": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n", "signature": "\ndef remove_odd(str1):\n    pass\n", "entry_point": "remove_odd", "tests": ["\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")\n", "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/439", "prompt": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n", "signature": "\ndef multiple_to_single(L):\n    pass\n", "entry_point": "multiple_to_single", "tests": ["\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025\n", "\n  assert isinstance(L, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(L) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/440", "prompt": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n", "signature": "def find_adverb_position(text):\n    pass\n", "entry_point": "find_adverb_position", "tests": ["\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n", "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/441", "prompt": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n", "signature": "\ndef surfacearea_cube(l):\n    pass\n", "entry_point": "surfacearea_cube", "tests": ["\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600\n", "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/445", "prompt": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n", "signature": "\ndef index_multiplication(test_tup1, test_tup2):\n    pass\n", "entry_point": "index_multiplication", "tests": ["\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/446", "prompt": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n", "signature": "def count_Occurrence(tup, lst):\n    pass\n", "entry_point": "count_Occurrence", "tests": ["\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n", "\n    assert isinstance(tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/447", "prompt": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n", "signature": "\ndef cube_nums(nums):\n    pass\n", "entry_point": "cube_nums", "tests": ["\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])\n", "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/448", "prompt": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n", "signature": "\ndef cal_sum(n):\n    pass\n", "entry_point": "cal_sum", "tests": ["\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/450", "prompt": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n", "signature": "\ndef extract_string(str1, l):\n    pass\n", "entry_point": "extract_string", "tests": ["\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n", "\n    assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/451", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n", "signature": "def remove_whitespaces(text1):\n    pass\n", "entry_point": "remove_whitespaces", "tests": ["\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n", "\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/453", "prompt": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n", "signature": "def sumofFactors(n) :\n    pass\n", "entry_point": "sumofFactors", "tests": ["\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/454", "prompt": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n", "signature": "def text_match_wordz(text):\n    pass\n", "entry_point": "text_match_wordz", "tests": ["\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False\n", "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/455", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n", "signature": "\ndef check_monthnumb_number(monthnum2):\n    pass\n", "entry_point": "check_monthnumb_number", "tests": ["\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False\n", "\n  assert isinstance(monthnum2, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/456", "prompt": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n", "signature": "\ndef reverse_string_list(stringlist):\n    pass\n", "entry_point": "reverse_string_list", "tests": ["\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n", "\n    assert isinstance(stringlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/457", "prompt": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "signature": "\ndef Find_Min(lst):\n    pass\n", "entry_point": "Find_Min", "tests": ["\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n", "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/458", "prompt": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n", "signature": "\ndef rectangle_area(l,b):\n    pass\n", "entry_point": "rectangle_area", "tests": ["\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8\n", "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/459", "prompt": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n", "signature": "\ndef remove_uppercase(str1):\n    pass\n", "entry_point": "remove_uppercase", "tests": ["\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n", "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n", "signature": "\ndef Extract(lst):\n    pass\n", "entry_point": "Extract", "tests": ["\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]\n", "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(l) > 0 for l in lst), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/462", "prompt": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n", "signature": "\ndef combinations_list(list1):\n    pass\n", "entry_point": "combinations_list", "tests": ["\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/463", "prompt": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n", "signature": "\ndef max_subarray_product(arr):\n    pass\n", "entry_point": "max_subarray_product", "tests": ["\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n", "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/465", "prompt": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n", "signature": "\ndef drop_empty(dict1):\n    pass\n", "entry_point": "drop_empty", "tests": ["\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n", "\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/468", "prompt": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n", "signature": "\ndef max_product(arr):\n    pass\n", "entry_point": "max_product", "tests": ["\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n", "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/470", "prompt": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n", "signature": "\ndef add_pairwise(test_tup):\n    pass\n", "entry_point": "add_pairwise", "tests": ["\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/471", "prompt": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n", "signature": "\ndef find_remainder(arr, n):\n    pass\n", "entry_point": "find_remainder", "tests": ["\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/472", "prompt": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "signature": "\ndef check_Consecutive(l):\n    pass\n", "entry_point": "check_Consecutive", "tests": ["\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False\n", "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/473", "prompt": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n", "signature": "\ndef tuple_intersection(test_list1, test_list2):\n    pass\n", "entry_point": "tuple_intersection", "tests": ["\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n", "\n  assert isinstance(test_list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_list2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/474", "prompt": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n", "signature": "\ndef replace_char(str1, ch, newch):\n    pass\n", "entry_point": "replace_char", "tests": ["\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")\n", "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(newch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newch) == 1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/475", "prompt": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n", "signature": "\ndef sort_counter(dict1):\n    pass\n", "entry_point": "sort_counter", "tests": ["\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n", "\n assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(x, (int, float)) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/476", "prompt": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n", "signature": "\ndef big_sum(nums):\n    pass\n", "entry_point": "big_sum", "tests": ["\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8\n", "\n      assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n      assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/477", "prompt": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "signature": "\ndef is_lower(string):\n    pass\n", "entry_point": "is_lower", "tests": ["\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"\n", "\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/478", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n", "signature": "def remove_lowercase(str1):\n    pass\n", "entry_point": "remove_lowercase", "tests": ["\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')\n", "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/479", "prompt": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n", "signature": "\ndef first_Digit(n) :\n    pass\n", "entry_point": "first_Digit", "tests": ["\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/554", "prompt": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n", "signature": "\ndef Split(l):\n    pass\n", "entry_point": "Split", "tests": ["\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]\n", "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/555", "prompt": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n", "signature": "\ndef difference(n) :\n    pass\n", "entry_point": "difference", "tests": ["\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/556", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n", "signature": "\ndef find_Odd_Pair(A,N) :\n    pass\n", "entry_point": "find_Odd_Pair", "tests": ["\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2\n", "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/557", "prompt": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n", "signature": "\ndef toggle_string(string):\n    pass\n", "entry_point": "toggle_string", "tests": ["\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")\n", "\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/558", "prompt": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n", "signature": "\ndef digit_distance_nums(n1, n2):\n    pass\n", "entry_point": "digit_distance_nums", "tests": ["\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7\n", "\n    assert isinstance(n1, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n2, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/559", "prompt": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n", "signature": "\ndef max_sub_array_sum(a, size):\n    pass\n", "entry_point": "max_sub_array_sum", "tests": ["\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n", "\n  assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(size, int), \"invalid inputs\" # $_CONTRACT_$\n  assert size <= len(a), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/560", "prompt": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n", "signature": "\ndef union_elements(test_tup1, test_tup2):\n    pass\n", "entry_point": "union_elements", "tests": ["\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/562", "prompt": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n", "signature": "\ndef Find_Max_Length(lst):\n    pass\n", "entry_point": "Find_Max_Length", "tests": ["\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n", "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/563", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n", "signature": "def extract_values(text):\n    pass\n", "entry_point": "extract_values", "tests": ["\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n", "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/564", "prompt": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n", "signature": "\ndef count_Pairs(arr,n):\n    pass\n", "entry_point": "count_Pairs", "tests": ["\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/565", "prompt": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n", "signature": "\ndef split(word):\n    pass\n", "entry_point": "split", "tests": ["\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']\n", "\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/566", "prompt": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n", "signature": "\ndef sum_digits(n):\n    pass\n", "entry_point": "sum_digits", "tests": ["\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16\n", "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/567", "prompt": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n", "signature": "\ndef issort_list(list1):\n    pass\n", "entry_point": "issort_list", "tests": ["\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/568", "prompt": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n", "signature": "\ndef empty_list(length):\n    pass\n", "entry_point": "empty_list", "tests": ["\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]\n", "\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/569", "prompt": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "signature": "\ndef sort_sublists(list1):\n    pass\n", "entry_point": "sort_sublists", "tests": ["\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for sublist in list1 for x in sublist), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/572", "prompt": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n", "signature": "\ndef two_unique_nums(nums):\n    pass\n", "entry_point": "two_unique_nums", "tests": ["\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n", "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/573", "prompt": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n", "signature": "\ndef unique_product(list_data):\n    pass\n", "entry_point": "unique_product", "tests": ["\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0\n", "\n    assert isinstance(list_data, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/576", "prompt": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n", "signature": "\ndef is_Sub_Array(A,B):\n    pass\n", "entry_point": "is_Sub_Array", "tests": ["\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False\n", "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(B, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/577", "prompt": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n", "signature": "\ndef last_Digit_Factorial(n):\n    pass\n", "entry_point": "last_Digit_Factorial", "tests": ["\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0\n", "\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/578", "prompt": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n", "signature": "\ndef interleave_lists(list1, list2, list3):\n    pass\n", "entry_point": "interleave_lists", "tests": ["\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/579", "prompt": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n", "signature": "\ndef find_dissimilar(test_tup1, test_tup2):\n    pass\n", "entry_point": "find_dissimilar", "tests": ["\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/580", "prompt": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n", "signature": "\ndef even_ele(test_tuple, ):\n    pass\n", "entry_point": "extract_even", "tests": ["\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n", "\n\tdef tuple_check(t): # $_CONTRACT_$\n\t\tif not isinstance(t, tuple): # $_CONTRACT_$\n\t\t\treturn isinstance(t, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(tuple_check(item) for item in t) # $_CONTRACT_$\n\tassert isinstance(test_tuple, tuple) # $_CONTRACT_$\n\tassert tuple_check(test_tuple) # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/581", "prompt": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n", "signature": "\ndef surface_Area(b,s):\n    pass\n", "entry_point": "surface_Area", "tests": ["\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5\n", "\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/583", "prompt": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n", "signature": "\ndef catalan_number(num):\n    pass\n", "entry_point": "catalan_number", "tests": ["\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429\n", "\n    assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n    assert num >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/585", "prompt": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n", "signature": "def expensive_items(items,n):\n    pass\n", "entry_point": "expensive_items", "tests": ["\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n", "\n  assert isinstance(items, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, dict) for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all('name' in x.keys() for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all('price' in x.keys() for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x['price'], (int, float)) for x in items), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/586", "prompt": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n", "signature": "\ndef split_Arr(l, n):\n    pass\n", "entry_point": "split_Arr", "tests": ["\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n", "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= len(l), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/587", "prompt": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n", "signature": "\ndef list_tuple(listx):\n    pass\n", "entry_point": "list_tuple", "tests": ["\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)\n", "\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/588", "prompt": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n", "signature": "\ndef big_diff(nums):\n    pass\n", "entry_point": "big_diff", "tests": ["\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7\n", "\n     assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/589", "prompt": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n", "signature": "def perfect_squares(a, b):\n    pass\n", "entry_point": "perfect_squares", "tests": ["\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]\n", "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/590", "prompt": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n", "signature": "def polar_rect(x,y):\n    pass\n", "entry_point": "polar_rect", "tests": ["\nassert polar_rect(3, 4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4, 7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15, 17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n", "\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/591", "prompt": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n", "signature": "\ndef swap_List(newList):\n    pass\n", "entry_point": "swap_List", "tests": ["\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]\n", "\n    assert isinstance(newList, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newList) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/592", "prompt": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n", "signature": "\ndef binomial_Coeff(n, k):\n    pass\n", "entry_point": "sum_Of_product", "tests": ["\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/593", "prompt": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n", "signature": "def removezero_ip(ip):\n    pass\n", "entry_point": "removezero_ip", "tests": ["\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')\n", "\n assert isinstance(ip, str), \"invalid inputs\" # $_CONTRACT_$\n assert len(ip) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/594", "prompt": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n", "signature": "\ndef diff_even_odd(list1):\n    pass\n", "entry_point": "diff_even_odd", "tests": ["\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(el%2==0 for el in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(el%2!=0 for el in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/596", "prompt": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n", "signature": "def tuple_size(tuple_list):\n    pass\n", "entry_point": "tuple_size", "tests": ["\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n", "\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/597", "prompt": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n", "signature": "\ndef find_kth(arr1, arr2, k):\n    pass\n", "entry_point": "find_kth", "tests": ["\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n", "\n\tassert isinstance(arr1, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(arr2, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert 0 < k <= len(arr1) + len(arr2), \"invalid inputs\" # $_CONTRACT_$j\n"]}
{"name": "MBPP/Mbpp/598", "prompt": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n", "signature": "\ndef armstrong_number(number):\n    pass\n", "entry_point": "armstrong_number", "tests": ["\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False\n", "\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/599", "prompt": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n", "signature": "\ndef sum_average(number):\n    pass\n", "entry_point": "sum_average", "tests": ["\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)\n", "\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/600", "prompt": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n", "signature": "\ndef is_Even(n) :\n    pass\n", "entry_point": "is_Even", "tests": ["\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/602", "prompt": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n", "signature": "\ndef first_repeated_char(str1):\n    pass\n", "entry_point": "first_repeated_char", "tests": ["\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"\n", "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n"]}
{"name": "MBPP/Mbpp/603", "prompt": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n", "signature": "\ndef get_ludic(n):\n    pass\n", "entry_point": "get_ludic", "tests": ["\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/604", "prompt": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n", "signature": "\ndef reverse_words(s):\n    pass\n", "entry_point": "reverse_words", "tests": ["\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")\n", "\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/605", "prompt": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n", "signature": "def prime_num(num):\n    pass\n", "entry_point": "prime_num", "tests": ["\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False\n", "\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/606", "prompt": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n", "signature": "def radian_degree(degree):\n    pass\n", "entry_point": "radian_degree", "tests": ["\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953\n", "\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/607", "prompt": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n", "signature": "def find_literals(text, pattern):\n    pass\n", "entry_point": "find_literals", "tests": ["\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n", "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/608", "prompt": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n", "signature": "\ndef bell_Number(n):\n    pass\n", "entry_point": "bell_Number", "tests": ["\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/610", "prompt": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n", "signature": "\ndef remove_kth_element(list1, k):\n    pass\n", "entry_point": "remove_kth_element", "tests": ["\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 < k <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/611", "prompt": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n", "signature": "\ndef max_of_nth(test_list, N):\n    pass\n", "entry_point": "max_of_nth", "tests": ["\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(row, list) for row in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(row) == len(test_list[0]) for row in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for row in test_list for item in row), \"invalid inputs\" # $_CONTRACT_$\n  assert N < len(test_list[0]), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/612", "prompt": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n", "signature": "\ndef merge(lst):\n    pass\n", "entry_point": "merge", "tests": ["\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n", "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(sublist) == 2 for sublist in lst), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/614", "prompt": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n", "signature": "\ndef cummulative_sum(test_list):\n    pass\n", "entry_point": "cummulative_sum", "tests": ["\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, tuple) for el in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in sum(test_list, ())), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/615", "prompt": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n", "signature": "\ndef average_tuple(nums):\n    pass\n", "entry_point": "average_tuple", "tests": ["\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n", "\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in sum(nums, ())), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/616", "prompt": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n", "signature": "\ndef tuple_modulo(test_tup1, test_tup2):\n    pass\n", "entry_point": "tuple_modulo", "tests": ["\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1 + test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x > 0 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/618", "prompt": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n", "signature": "\ndef div_list(nums1,nums2):\n    pass\n", "entry_point": "div_list", "tests": ["\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]\n", "\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums1 + nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x != 0 for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/619", "prompt": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n", "signature": "\ndef move_num(test_str):\n    pass\n", "entry_point": "move_num", "tests": ["\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n", "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/620", "prompt": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n", "signature": "\ndef largest_subset(a):\n    pass\n", "entry_point": "largest_subset", "tests": ["\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4\n", "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(a) >= 2, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(el, (int, float)) for el in a), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/622", "prompt": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n", "signature": "\ndef get_median(arr1, arr2, n):\n    pass\n", "entry_point": "get_median", "tests": ["\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n", "\n  assert isinstance(arr1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(arr2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= min(len(arr1), len(arr2)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr1 + arr2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x <= y for x, y in zip(arr1[0:n], arr1[1:n])), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x <= y for x, y in zip(arr2[0:n], arr2[1:n])), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/623", "prompt": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n", "signature": "\ndef nth_nums(nums, n):\n    pass\n", "entry_point": "nth_nums", "tests": ["\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])\n", "\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/624", "prompt": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n", "signature": "\ndef is_upper(string):\n    pass\n", "entry_point": "is_upper", "tests": ["\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"\n", "\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/626", "prompt": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n", "signature": "\ndef triangle_area(r) :\n    pass\n", "entry_point": "triangle_area", "tests": ["\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4\n", "\n    assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/628", "prompt": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n", "signature": "\ndef replace_spaces(string):\n    pass\n", "entry_point": "replace_spaces", "tests": ["\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'\n", "\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/629", "prompt": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n", "signature": "\ndef Split(l):\n    pass\n", "entry_point": "Split", "tests": ["\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]\n", "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/630", "prompt": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n", "signature": "\ndef adjac(ele, sub = []):\n    pass\n", "entry_point": "get_coordinates", "tests": ["\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/631", "prompt": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n", "signature": "\ndef replace_spaces(text):\n    pass\n", "entry_point": "replace_spaces", "tests": ["\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n", "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/632", "prompt": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n", "signature": "\ndef move_zero(num_list):\n    pass\n", "entry_point": "move_zero", "tests": ["\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]\n", "\n    assert isinstance(num_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/633", "prompt": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n", "signature": "\ndef pair_xor_Sum(arr,n) :\n    pass\n", "entry_point": "pair_xor_Sum", "tests": ["\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/635", "prompt": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n", "signature": "def heap_sort(iterable):\n    pass\n", "entry_point": "heap_sort", "tests": ["\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n", "\n    assert isinstance(iterable, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/637", "prompt": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n", "signature": "\ndef noprofit_noloss(actual_cost, sale_amount):\n    pass\n", "entry_point": "noprofit_noloss", "tests": ["\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False\n", "\n  assert isinstance(actual_cost, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(sale_amount, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/638", "prompt": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n", "signature": "def wind_chill(v,t):\n    pass\n", "entry_point": "wind_chill", "tests": ["\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6\n", "\n assert isinstance(v, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(t, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/639", "prompt": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n", "signature": "\ndef sample_nam(sample_names):\n    pass\n", "entry_point": "sample_nam", "tests": ["\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n", "\n  assert isinstance(sample_names, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/641", "prompt": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n", "signature": "\ndef is_nonagonal(n):\n    pass\n", "entry_point": "is_nonagonal", "tests": ["\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/643", "prompt": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n", "signature": "def text_match_wordz_middle(text):\n    pass\n", "entry_point": "text_match_wordz_middle", "tests": ["\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False\n", "\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/644", "prompt": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n", "signature": "\ndef reverse_Array_Upto_K(input, k):\n    pass\n", "entry_point": "reverse_Array_Upto_K", "tests": ["\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n", "\n  assert isinstance(input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 < k <= len(input), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/720", "prompt": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n", "signature": "\ndef add_dict_to_tuple(test_tup, test_dict):\n    pass\n", "entry_point": "add_dict_to_tuple", "tests": ["\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_dict, dict), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/721", "prompt": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n", "signature": "\ndef maxAverageOfPath(cost):\n    pass\n", "entry_point": "maxAverageOfPath", "tests": ["\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n", "\n  assert isinstance(cost, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(cost) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, list) for x in cost), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == len(cost) == len(cost[0]) for x in cost), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in sum(cost, [])), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/722", "prompt": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n", "signature": "\ndef filter_data(students,h,w):\n    pass\n", "entry_point": "filter_data", "tests": ["\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n", "\n    assert isinstance(students, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in students.keys()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(height, (int, float)) and isinstance(weight, (int, float)) for height, weight in students.values()) # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(w, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert h >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert w >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/723", "prompt": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n", "signature": "def count_same_pair(nums1, nums2):\n    pass\n", "entry_point": "count_same_pair", "tests": ["\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3\n", "\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert all(hasattr(a, '__eq__') and isinstance(a, type(b)) for a, b in zip(nums1, nums2)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/724", "prompt": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n", "signature": "\ndef power_base_sum(base, power):\n    pass\n", "entry_point": "power_base_sum", "tests": ["\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9\n", "\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/725", "prompt": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n", "signature": "def extract_quotation(text1):\n    pass\n", "entry_point": "extract_quotation", "tests": ["\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n", "\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/726", "prompt": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n", "signature": "\ndef multiply_elements(test_tup):\n    pass\n", "entry_point": "multiply_elements", "tests": ["\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/728", "prompt": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n", "signature": "\ndef sum_list(lst1,lst2):\n    pass\n", "entry_point": "sum_list", "tests": ["\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]\n", "\n  assert isinstance(lst1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(lst2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/730", "prompt": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n", "signature": "def consecutive_duplicates(nums):\n    pass\n", "entry_point": "consecutive_duplicates", "tests": ["\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n", "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/731", "prompt": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n", "signature": "def lateralsurface_cone(r,h):\n    pass\n", "entry_point": "lateralsurface_cone", "tests": ["\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388\n", "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/732", "prompt": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n", "signature": "def replace_specialchar(text):\n    pass\n", "entry_point": "replace_specialchar", "tests": ["\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n", "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/733", "prompt": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n", "signature": "\ndef find_first_occurrence(A, x):\n    pass\n", "entry_point": "find_first_occurrence", "tests": ["\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n", "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(a, (int, float)) for a in A), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(A, A[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert x in A, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/734", "prompt": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n", "signature": "\ndef sum_Of_Subarray_Prod(arr):\n    pass\n", "entry_point": "sum_Of_Subarray_Prod", "tests": ["\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/735", "prompt": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \nassert toggle_middle_bits(9) == 15\n\"\"\"\n", "signature": "\ndef toggle_middle_bits(n):\n    pass\n", "entry_point": "toggle_middle_bits", "tests": ["\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/736", "prompt": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. \nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n", "signature": "def left_insertion(a, x):\n    pass\n", "entry_point": "left_insertion", "tests": ["\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4\n", "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x <= y for x, y in zip(a, a[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in a), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/737", "prompt": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n", "signature": "def check_str(string):\n    pass\n", "entry_point": "check_str", "tests": ["\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")\n", "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/739", "prompt": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \nassert find_Index(2) == 4\n\"\"\"\n", "signature": "def find_Index(n):\n    pass\n", "entry_point": "find_Index", "tests": ["\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/740", "prompt": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n", "signature": "\ndef tuple_to_dict(test_tup):\n    pass\n", "entry_point": "tuple_to_dict", "tests": ["\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/741", "prompt": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n", "signature": "\ndef all_Characters_Same(s) :\n    pass\n", "entry_point": "all_Characters_Same", "tests": ["\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False\n", "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/742", "prompt": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n", "signature": "def area_tetrahedron(side):\n    pass\n", "entry_point": "area_tetrahedron", "tests": ["\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)\n", "\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert side > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/743", "prompt": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n", "signature": "\ndef rotate_right(l, m):\n    pass\n", "entry_point": "rotate_right", "tests": ["\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n", "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/744", "prompt": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n", "signature": "\ndef check_none(test_tup):\n    pass\n", "entry_point": "check_none", "tests": ["\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/745", "prompt": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n", "signature": "\ndef divisible_by_digits(startnum, endnum):\n    pass\n", "entry_point": "divisible_by_digits", "tests": ["\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]\n", "\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/748", "prompt": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n", "signature": "def capital_words_spaces(str1):\n    pass\n", "entry_point": "capital_words_spaces", "tests": ["\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n", "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/749", "prompt": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n", "signature": "\ndef sort_numeric_strings(nums_str):\n    pass\n", "entry_point": "sort_numeric_strings", "tests": ["\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n", "\n    def check_numeric(num: str): # $_CONTRACT_$\n        return num.lstrip('-').rstrip(' ').isdigit() # $_CONTRACT_$\n    assert isinstance(nums_str, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in nums_str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(check_numeric(num) for num in nums_str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/750", "prompt": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n", "signature": "\ndef add_tuple(test_list, test_tup):\n    pass\n", "entry_point": "add_tuple", "tests": ["\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/751", "prompt": "\"\"\"\nWrite a function to check if the given array represents min heap or not. \nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n", "signature": "\ndef check_min_heap_helper(arr, i):\n    pass\n", "entry_point": "check_min_heap", "tests": ["\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False\n", "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/752", "prompt": "\"\"\"\nWrite a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n", "signature": "\ndef jacobsthal_num(n):\n    pass\n", "entry_point": "jacobsthal_num", "tests": ["\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/753", "prompt": "\"\"\"\nWrite a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n", "signature": "\ndef min_k(test_list, K):\n    pass\n", "entry_point": "min_k", "tests": ["\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x[1], (int, float)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert K <= len(test_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/754", "prompt": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n", "signature": "\ndef extract_index_list(l1, l2, l3):\n    pass\n", "entry_point": "extract_index_list", "tests": ["\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]\n", "\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/755", "prompt": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n", "signature": "\ndef second_smallest(numbers):\n    pass\n", "entry_point": "second_smallest", "tests": ["\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None\n", "\n  assert isinstance(numbers, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/757", "prompt": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n", "signature": "\ndef count_reverse_pairs(test_list):\n    pass\n", "entry_point": "count_reverse_pairs", "tests": ["\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/758", "prompt": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n", "signature": "\ndef unique_sublists(list1):\n    pass\n", "entry_point": "unique_sublists", "tests": ["\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}\n", "\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(tuple(x)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/759", "prompt": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n", "signature": "\ndef is_decimal(num):\n    pass\n", "entry_point": "is_decimal", "tests": ["\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False\n", "\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/760", "prompt": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n", "signature": "\ndef unique_Element(arr):\n    pass\n", "entry_point": "unique_Element", "tests": ["\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/762", "prompt": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n", "signature": "\ndef check_monthnumber_number(monthnum3):\n    pass\n", "entry_point": "check_monthnumber_number", "tests": ["\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False\n", "\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/763", "prompt": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n", "signature": "\ndef find_min_diff(arr,n):\n    pass\n", "entry_point": "find_min_diff", "tests": ["\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4\n", "\n    assert isinstance(arr, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n == len(arr), \"invalid inputs\" # $_CONTRACT_$ \n"]}
{"name": "MBPP/Mbpp/764", "prompt": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n", "signature": "\ndef number_ctr(s):\n    pass\n", "entry_point": "number_ctr", "tests": ["\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3\n", "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/765", "prompt": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n", "signature": "def is_polite(n):\n    pass\n", "entry_point": "is_polite", "tests": ["\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13\n", "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/766", "prompt": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n", "signature": "\ndef pair_wise(l1):\n    pass\n", "entry_point": "pair_wise", "tests": ["\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n", "\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/767", "prompt": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n", "signature": "\ndef get_pairs_count(arr, sum_):\n    pass\n", "entry_point": "get_pairs_count", "tests": ["\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(sum_, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/769", "prompt": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n", "signature": "\ndef Diff(li1,li2):\n    pass\n", "entry_point": "Diff", "tests": ["\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]\n", "\n    assert isinstance(li1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(li2, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/770", "prompt": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n", "signature": "\ndef odd_num_sum(n) :\n    pass\n", "entry_point": "odd_num_sum", "tests": ["\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/771", "prompt": "\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n", "signature": "def check_expression(exp):\n    pass\n", "entry_point": "check_expression", "tests": ["\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True\n", "\n    assert isinstance(exp, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/772", "prompt": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n", "signature": "\ndef remove_length(test_str, K):\n    pass\n", "entry_point": "remove_length", "tests": ["\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n", "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/773", "prompt": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n", "signature": "def occurance_substring(text,pattern):\n    pass\n", "entry_point": "occurance_substring", "tests": ["\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None\n", "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/775", "prompt": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n", "signature": "\ndef odd_position(nums):\n    pass\n", "entry_point": "odd_position", "tests": ["\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False\n", "\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/777", "prompt": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n", "signature": "\ndef find_sum(arr):\n    pass\n", "entry_point": "find_sum", "tests": ["\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/778", "prompt": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n", "signature": "def pack_consecutive_duplicates(list1):\n    pass\n", "entry_point": "pack_consecutive_duplicates", "tests": ["\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/780", "prompt": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n", "signature": "def find_combinations(test_list):\n    pass\n", "entry_point": "find_combinations", "tests": ["\nassert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(t, tuple) for t in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(t) == len(test_list[0]) for t in test_list), \"invalid inputs\" # $_CONTRACT_$))\n  assert all(isinstance(x, (int, float)) for t in test_list for x in t), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/781", "prompt": "\"\"\"\nWrite a python function to check whether the count of divisors is even. \nassert count_divisors(10)\n\"\"\"\n", "signature": "def count_divisors(n) :\n    pass\n", "entry_point": "count_divisors", "tests": ["\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/782", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n", "signature": "\ndef odd_length_sum(arr):\n    pass\n", "entry_point": "odd_length_sum", "tests": ["\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/784", "prompt": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n", "signature": "\ndef mul_even_odd(list1):\n    pass\n", "entry_point": "mul_even_odd", "tests": ["\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10\n", "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert any(x % 2 == 0 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(x % 2 != 0 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/785", "prompt": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n", "signature": "\ndef tuple_str_int(test_str):\n    pass\n", "entry_point": "tuple_str_int", "tests": ["\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)\n", "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.startswith('('), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.endswith(')'), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.lstrip('(').rstrip(')').replace('...', '').replace(',', '').replace(' ', '').isdigit(), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/786", "prompt": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n", "signature": "def right_insertion(a, x):\n    pass\n", "entry_point": "right_insertion", "tests": ["\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4\n", "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/787", "prompt": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n", "signature": "def text_match_three(text):\n    pass\n", "entry_point": "text_match_three", "tests": ["\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")\n", "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/788", "prompt": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n", "signature": "\ndef new_tuple(test_list, test_str):\n    pass\n", "entry_point": "new_tuple", "tests": ["\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n", "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/790", "prompt": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n", "signature": "\ndef even_position(nums):\n    pass\n", "entry_point": "even_position", "tests": ["\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True\n", "\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/791", "prompt": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n", "signature": "\ndef remove_nested(test_tup):\n    pass\n", "entry_point": "remove_nested", "tests": ["\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/792", "prompt": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n", "signature": "\ndef count_list(input_list):\n    pass\n", "entry_point": "count_list", "tests": ["\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2\n", "\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/793", "prompt": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n", "signature": "\ndef last(arr,x):\n    pass\n", "entry_point": "last", "tests": ["\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,2,3,3,6,8,9],3) == 3\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/794", "prompt": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n", "signature": "def text_starta_endb(text):\n    pass\n", "entry_point": "text_starta_endb", "tests": ["\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")\n", "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/796", "prompt": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n", "signature": "\ndef return_sum(d):\n    pass\n", "entry_point": "return_sum", "tests": ["\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124\n", "\n  assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in d.values()), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/797", "prompt": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n", "signature": "\ndef sum_odd(n):\n    pass\n", "entry_point": "sum_in_range", "tests": ["\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40\n", "\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/798", "prompt": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n", "signature": "\ndef _sum(arr):\n    pass\n", "entry_point": "_sum", "tests": ["\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/799", "prompt": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n", "signature": "\ndef left_rotate(n,d):\n    pass\n", "entry_point": "left_rotate", "tests": ["\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(d, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n <= 0xffffffff, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/800", "prompt": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n", "signature": "\ndef remove_all_spaces(text):\n    pass\n", "entry_point": "remove_all_spaces", "tests": ["\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'\n", "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n", "signature": "\ndef test_three_equal(x,y,z):\n    pass\n", "entry_point": "test_three_equal", "tests": ["\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2\n", "\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/803", "prompt": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. \nassert not is_perfect_square(10)\n\"\"\"\n", "signature": "\ndef is_perfect_square(n) :\n    pass\n", "entry_point": "is_perfect_square", "tests": ["\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)\n", "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/804", "prompt": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n", "signature": "\ndef is_product_even(arr):\n    pass\n", "entry_point": "is_product_even", "tests": ["\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])\n", "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/805", "prompt": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n", "signature": "\ndef max_sum_list(lists):\n    pass\n", "entry_point": "max_sum_list", "tests": ["\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]\n", "\n assert isinstance(lists, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(x, list) for x in lists), \"invalid inputs\" # $_CONTRACT_$\n assert all(all(isinstance(y, (int, float)) for y in x) for x in lists), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/806", "prompt": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n", "signature": "\ndef max_run_uppercase(test_str):\n    pass\n", "entry_point": "max_run_uppercase", "tests": ["\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4\n", "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_str) > 0, \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/807", "prompt": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n", "signature": "\ndef first_odd(nums):\n    pass\n", "entry_point": "first_odd", "tests": ["\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9\n", "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert any(el % 2 != 0 for el in nums), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/808", "prompt": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n", "signature": "\ndef check_K(test_tup, K):\n    pass\n", "entry_point": "check_K", "tests": ["\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True\n", "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n"]}
{"name": "MBPP/Mbpp/809", "prompt": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n", "signature": "\ndef check_smaller(test_tup1, test_tup2):\n    pass\n", "entry_point": "check_smaller", "tests": ["\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True\n", "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n"]}
