{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean_value) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.extend([num] if i == len(numbers) - 1 else [num, delimiter])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    rolling_maxes = [numbers[0]]\n    current_max = numbers[0]\n    \n    for number in numbers[1:]:\n        if number > current_max:\n            current_max = number\n        rolling_maxes.append(current_max)\n    \n    return rolling_maxes"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    n = len(string)\n    for i in range(n):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x == y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numeral_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda x: numeral_map[x])\n    return ' '.join(sorted_nums)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] < min_diff:\n            min_diff = numbers[i] - numbers[i - 1]\n            closest = (numbers[i - 1], numbers[i])\n    return closest"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # Now n is odd, start checking from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    unique_numbers = []\n    for number in numbers:\n        if number not in seen:\n            unique_numbers.append(number)\n            seen.add(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    return sum(coef * x**i for i, coef in enumerate(xs))"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    if len(l) >= 3:\n        l[2::3] = sorted(l[2::3])"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    if not l:\n        return None\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            print('Fizz')\n        elif i % 5 == 0:\n            print('Buzz')\n        else:\n            print(i)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_numbers = [num for num in l if num % 2 == 0]\n    even_numbers.sort()\n    return even_numbers"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    if not s:\n        return \"\"\n    result = []\n    for i in range(len(s) // 4 + 1):\n        chunk = s[i * 4:(i + 1) * 4]\n        if len(chunk) == 4:\n            result.append(chunk[3])\n            result.append(chunk[2])\n            result.append(chunk[1])\n            result.append(chunk[0])\n        else:\n            result.extend(reversed(chunk))\n    return ''.join(result)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    if n < 1:\n        return 0\n    \n    collisions = 0\n    for i in range(1, n + 1):\n        collisions += i - 1\n    \n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    negative = x < 0\n    x = abs(x)\n    \n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    \n    if negative:\n        result = \"-\" + result\n    \n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return n % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return ''.join(chr(ord(c) + 1) for c in s)"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in brackets:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n        else:\n            continue\n    \n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if not l:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n if n > 1 else i - 1"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in brackets:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n        else:\n            continue\n    \n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i+1] - xs[i] for i in range(len(xs) - 1)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    return sum(1 for c in s if c in 'aeiouAEIOU')"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    shift %= 8\n    x = x >> shift | x << 8 - shift & 0xFFFF\n    return x"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(int(char) for char in s if char.isdigit())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = {}\n    for fruit in s:\n        if fruit in fruits:\n            fruits[fruit] += 1\n        else:\n            fruits[fruit] = 1\n    \n    for fruit, count in fruits.items():\n        if fruit != 'orange':\n            print(f\"Number of {fruit}: {count * n}\")"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    return [x[1] for x in arr if len(x) > 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return [x for x in lst if x > 0]"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return [lst[i] for i in sorted(range(len(lst)), key=lambda x: (sum(int(d) for d in str(x)), x))]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if all(x >= 0 for x in q) and sum(q) / len(q) < w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    if not arr:\n        return None\n    \n    min_diff = float('inf')\n    result = (None, None)\n    \n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (i, i + 1)\n    \n    return result"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return all(x == y for x, y in zip(lst1, lst2))"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 3:\n                return False\n    return count == 3"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    if n == 1:\n        return x == x\n    if x == 1:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    return hex(num)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    visited = set()\n    while s not in visited:\n        visited.add(s)\n        s = sum(int(char) ** 2 for char in str(s))\n        if s == 1:\n            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    if grades >= 90:\n        return 'A'\n    elif grades >= 80:\n        return 'B'\n    elif grades >= 70:\n        return 'C'\n    elif grades >= 60:\n        return 'D'\n    else:\n        return 'F'"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if string == \"\":\n        return False\n    \n    length = len(string)\n    \n    if length == 1:\n        return True\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return str(n).startswith('1') and str(n).endswith('1')"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, N):\n            a, b = b, a + b\n        return b - 1"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join(sorted(s))"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    for row in lst:\n        if x in row:\n            return row"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join([chr(ord(c) + 1) for c in s])"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst or len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    return \"bored\" in S.lower()"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return isinstance(x, int) or isinstance(y, int) or isinstance(z, int)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        encoded_message += str(ord(char)) + \" \"\n    return encoded_message.strip()"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n    return result"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    keys_lower = all(key.islower() for key in dict.keys())\n    keys_upper = all(key.isupper() for key in dict.keys())\n    mixed_case = not keys_lower and not keys_upper\n    \n    if keys_lower or keys_upper:\n        return True\n    elif mixed_case:\n        return \"Mixed case keys are not allowed.\"\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    for i in range(1, n + 1):\n        print(i)"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a * b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return round(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    for i in range(1, n + 1):\n        pile.append(i)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return ' '.join(s.split())"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    avg = (n + m) / 2\n    return round(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return len(set(str(x)))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    return sorted(arr, key=len)"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return n * n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and (i % 2 == 0 or i % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if isinstance(num, (int, float)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != i + 1:\n            correct_pos = arr.index(i + 1)\n            arr[i], arr[correct_pos] = arr[correct_pos], arr[i]\n            break\n    return arr"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    lst1, lst2 = lst2, lst1"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    from collections import defaultdict\n    \n    freq_dict = defaultdict(int)\n    for item in test:\n        freq_dict[item] += 1\n    \n    return dict(freq_dict)"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s = list(s)\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == c:\n            del s[i]\n    return ''.join(s)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return sum(1 for x in lst if x % 2 != 0)"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    current_sum = min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_water = 0\n    \n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                water = 0\n                for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < rows and 0 <= nj < cols and grid[ni][nj] == 0:\n                        water += 1\n                max_water = max(max_water, min(water, capacity))\n    \n    return max_water"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    closest_vowel = None\n    min_distance = float('inf')\n    word_length = len(word) - 1\n    \n    for i, char in enumerate(word):\n        if char in vowels:\n            distance = min(i, word_length - i)\n            if distance < min_distance:\n                min_distance = distance\n                closest_vowel = char\n                \n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for item in lst:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return [x * 2 for x in lst]"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                result.append((arr[i], arr[j]))\n    return result"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            return n\n    return 1"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    import re\n    pattern = r\"^\\d{4}-\\d{2}-\\d{2}$\"\n    return bool(re.match(pattern, date))"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    return txt.split()"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return None\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start < end:\n        return (start, end)\n    else:\n        return None"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product = 0\n            break\n    return product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    m, n = len(grid), len(grid[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    \n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j])\n    \n    return sum(sorted(dp[-1])[:k])\n```\n\nNote: This solution assumes that the task is to find the k smallest values in the last row of the grid after applying a path sum operation. The path sum operation here is simplified to just moving right or down, and the goal is to find the k smallest such sums."}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return len(str(abs(n)))"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(x**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != i + 1:\n            for j in range(i + 1, n):\n                if arr[j] == i + 1:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    return True\n    return False"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n    \n    largest = smallest = lst[0]\n    \n    for num in lst:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest, smallest"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return sum(int(digit) for digit in str(n)) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return ' '.join(text.split())"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if not isinstance(file_name, str):\n        return False\n    if len(file_name) > 255:\n        return False\n    invalid_chars = set(r'\\\\/:*?\"<>|')\n    if any(char in invalid_chars for char in file_name):\n        return False\n    return True"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 for x in lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    return sentence.split()"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    return x ** (1/n)"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: x[1])"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return [num for num in nums if num % 2 == 0]"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    triples = [(i, j, k) for i in range(1, n+1) for j in range(i, n+1) for k in range(j, n+1) if i**2 + j**2 == k**2]\n    return max(triples, key=lambda x: x[2]) if triples else None"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    return planet1 == planet2 or (planet1 + 1) % 8 == planet2 or (planet2 + 1) % 8 == planet1"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sum(sorted(lst))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    return x if n % 2 == 0 else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return [2 * x for x in lst if x > 0]"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    correct = 0\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            correct += 1\n    return correct"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    return max(extensions, key=lambda ext: sum(c.isupper() for c in ext))"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    return b in (a * 2)"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    if not words:\n        return None\n    max_word = words[0]\n    for word in words:\n        if len(word) > len(max_word):\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number < need:\n        remaining -= number\n        return number\n    else:\n        remaining -= need\n        return need"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if operator == '+':\n        return operand[0] + operand[1]\n    elif operator == '-':\n        return operand[0] - operand[1]\n    elif operator == '*':\n        return operand[0] * operand[1]\n    elif operator == '/':\n        return operand[0] / operand[1]"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return s[::-1]"}
{"task_id": "HumanEval/162", "completion": "\ndef string_to_md5(text):\n        import hashlib\n\n    def string_to_md5(text):\n        md5_hash = hashlib.md5(text.encode()).hexdigest()\n        return md5_hash\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return list(range(a, b + 1))"}
